export default "12866\n{\"version\":0,\"id\":\"3fd105faa2a0c5b44d79a493477c8444211e3497e1c8d37c857b45833abfe858\",\"main\":\"/backend/backend.mjs\",\"imports\":{},\"resolutions\":{\"/backend/backend.mjs\":{\"#package\":\"/package.json\",\"../rpc-commands.mjs\":\"/rpc-commands.mjs\",\"bare-fs\":\"/node_modules/bare-fs/index.js\",\"bare-rpc\":\"/node_modules/bare-rpc/index.js\",\"bare-url\":\"/node_modules/bare-url/index.js\"},\"/node_modules/b4a/index.js\":{\"#package\":\"/node_modules/b4a/package.json\"},\"/node_modules/b4a/package.json\":{},\"/node_modules/bare-events/index.js\":{\"#package\":\"/node_modules/bare-events/package.json\",\"./lib/errors\":\"/node_modules/bare-events/lib/errors.js\"},\"/node_modules/bare-events/lib/errors.js\":{\"#package\":\"/node_modules/bare-events/package.json\"},\"/node_modules/bare-events/package.json\":{},\"/node_modules/bare-fs/binding.js\":{\"#package\":\"/node_modules/bare-fs/package.json\",\".\":{\"ios\":\"linked:bare-fs.4.1.6.framework/bare-fs.4.1.6\",\"android\":\"linked:libbare-fs.4.1.6.so\"}},\"/node_modules/bare-fs/index.js\":{\"#package\":\"/node_modules/bare-fs/package.json\",\"./binding\":\"/node_modules/bare-fs/binding.js\",\"./lib/constants\":\"/node_modules/bare-fs/lib/constants.js\",\"bare-events\":\"/node_modules/bare-events/index.js\",\"bare-path\":\"/node_modules/bare-path/index.js\",\"bare-stream\":\"/node_modules/bare-stream/index.js\"},\"/node_modules/bare-fs/lib/constants.js\":{\"#package\":\"/node_modules/bare-fs/package.json\",\"../binding\":\"/node_modules/bare-fs/binding.js\"},\"/node_modules/bare-fs/package.json\":{},\"/node_modules/bare-os/binding.js\":{\"#package\":\"/node_modules/bare-os/package.json\",\".\":{\"ios\":\"linked:bare-os.3.6.1.framework/bare-os.3.6.1\",\"android\":\"linked:libbare-os.3.6.1.so\"}},\"/node_modules/bare-os/index.js\":{\"#package\":\"/node_modules/bare-os/package.json\",\"./binding\":\"/node_modules/bare-os/binding.js\",\"./lib/constants\":\"/node_modules/bare-os/lib/constants.js\",\"./lib/errors\":\"/node_modules/bare-os/lib/errors.js\"},\"/node_modules/bare-os/lib/constants.js\":{\"#package\":\"/node_modules/bare-os/package.json\",\"../binding\":\"/node_modules/bare-os/binding.js\"},\"/node_modules/bare-os/lib/errors.js\":{\"#package\":\"/node_modules/bare-os/package.json\"},\"/node_modules/bare-os/package.json\":{},\"/node_modules/bare-path/index.js\":{\"#package\":\"/node_modules/bare-path/package.json\",\"./lib/posix\":\"/node_modules/bare-path/lib/posix.js\",\"./lib/win32\":\"/node_modules/bare-path/lib/win32.js\"},\"/node_modules/bare-path/lib/constants.js\":{\"#package\":\"/node_modules/bare-path/package.json\"},\"/node_modules/bare-path/lib/posix.js\":{\"#package\":\"/node_modules/bare-path/package.json\",\"./constants\":\"/node_modules/bare-path/lib/constants.js\",\"./shared\":\"/node_modules/bare-path/lib/shared.js\",\"./win32\":\"/node_modules/bare-path/lib/win32.js\",\"bare-os\":\"/node_modules/bare-os/index.js\"},\"/node_modules/bare-path/lib/shared.js\":{\"#package\":\"/node_modules/bare-path/package.json\",\"./constants\":\"/node_modules/bare-path/lib/constants.js\"},\"/node_modules/bare-path/lib/win32.js\":{\"#package\":\"/node_modules/bare-path/package.json\",\"./constants\":\"/node_modules/bare-path/lib/constants.js\",\"./posix\":\"/node_modules/bare-path/lib/posix.js\",\"./shared\":\"/node_modules/bare-path/lib/shared.js\",\"bare-os\":\"/node_modules/bare-os/index.js\"},\"/node_modules/bare-path/package.json\":{},\"/node_modules/bare-rpc/index.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./lib/command-router\":\"/node_modules/bare-rpc/lib/command-router.js\",\"./lib/constants\":\"/node_modules/bare-rpc/lib/constants.js\",\"./lib/incoming-request\":\"/node_modules/bare-rpc/lib/incoming-request.js\",\"./lib/incoming-stream\":\"/node_modules/bare-rpc/lib/incoming-stream.js\",\"./lib/messages\":\"/node_modules/bare-rpc/lib/messages.js\",\"./lib/outgoing-request\":\"/node_modules/bare-rpc/lib/outgoing-request.js\",\"./lib/outgoing-stream\":\"/node_modules/bare-rpc/lib/outgoing-stream.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\"},\"/node_modules/bare-rpc/lib/command-router.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/bare-rpc/lib/constants.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\"},\"/node_modules/bare-rpc/lib/errors.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\"},\"/node_modules/bare-rpc/lib/incoming-request.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./errors\":\"/node_modules/bare-rpc/lib/errors.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/bare-rpc/lib/incoming-stream.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./constants\":\"/node_modules/bare-rpc/lib/constants.js\",\"bare-stream\":\"/node_modules/bare-stream/index.js\"},\"/node_modules/bare-rpc/lib/messages.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./constants\":\"/node_modules/bare-rpc/lib/constants.js\",\"./errors\":\"/node_modules/bare-rpc/lib/errors.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/bare-rpc/lib/outgoing-request.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./errors\":\"/node_modules/bare-rpc/lib/errors.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/bare-rpc/lib/outgoing-stream.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./constants\":\"/node_modules/bare-rpc/lib/constants.js\",\"bare-stream\":\"/node_modules/bare-stream/index.js\"},\"/node_modules/bare-rpc/package.json\":{},\"/node_modules/bare-stream/index.js\":{\"#package\":\"/node_modules/bare-stream/package.json\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/bare-stream/package.json\":{},\"/node_modules/bare-url/binding.js\":{\"#package\":\"/node_modules/bare-url/package.json\",\".\":{\"ios\":\"linked:bare-url.2.1.6.framework/bare-url.2.1.6\",\"android\":\"linked:libbare-url.2.1.6.so\"}},\"/node_modules/bare-url/index.js\":{\"#package\":\"/node_modules/bare-url/package.json\",\"./binding\":\"/node_modules/bare-url/binding.js\",\"./lib/errors\":\"/node_modules/bare-url/lib/errors.js\",\"bare-path\":\"/node_modules/bare-path/index.js\"},\"/node_modules/bare-url/lib/errors.js\":{\"#package\":\"/node_modules/bare-url/package.json\"},\"/node_modules/bare-url/package.json\":{},\"/node_modules/compact-encoding/endian.js\":{\"#package\":\"/node_modules/compact-encoding/package.json\"},\"/node_modules/compact-encoding/index.js\":{\"#package\":\"/node_modules/compact-encoding/package.json\",\"./endian\":\"/node_modules/compact-encoding/endian.js\",\"./lexint\":\"/node_modules/compact-encoding/lexint.js\",\"./raw\":\"/node_modules/compact-encoding/raw.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/compact-encoding/lexint.js\":{\"#package\":\"/node_modules/compact-encoding/package.json\"},\"/node_modules/compact-encoding/package.json\":{},\"/node_modules/compact-encoding/raw.js\":{\"#package\":\"/node_modules/compact-encoding/package.json\",\"./endian\":\"/node_modules/compact-encoding/endian.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/fast-fifo/fixed-size.js\":{\"#package\":\"/node_modules/fast-fifo/package.json\"},\"/node_modules/fast-fifo/index.js\":{\"#package\":\"/node_modules/fast-fifo/package.json\",\"./fixed-size\":\"/node_modules/fast-fifo/fixed-size.js\"},\"/node_modules/fast-fifo/package.json\":{},\"/node_modules/safety-catch/index.js\":{\"#package\":\"/node_modules/safety-catch/package.json\"},\"/node_modules/safety-catch/package.json\":{},\"/node_modules/streamx/index.js\":{\"#package\":\"/node_modules/streamx/package.json\",\"events\":\"/node_modules/bare-events/index.js\",\"fast-fifo\":\"/node_modules/fast-fifo/index.js\",\"text-decoder\":\"/node_modules/text-decoder/index.js\"},\"/node_modules/streamx/package.json\":{},\"/node_modules/text-decoder/index.js\":{\"#package\":\"/node_modules/text-decoder/package.json\",\"./lib/pass-through-decoder\":\"/node_modules/text-decoder/lib/pass-through-decoder.js\",\"./lib/utf8-decoder\":\"/node_modules/text-decoder/lib/utf8-decoder.js\"},\"/node_modules/text-decoder/lib/pass-through-decoder.js\":{\"#package\":\"/node_modules/text-decoder/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/text-decoder/lib/utf8-decoder.js\":{\"#package\":\"/node_modules/text-decoder/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/text-decoder/package.json\":{},\"/package.json\":{},\"/rpc-commands.mjs\":{\"#package\":\"/package.json\"}},\"addons\":[\"linked:bare-fs.4.1.6.framework/bare-fs.4.1.6\",\"linked:bare-os.3.6.1.framework/bare-os.3.6.1\",\"linked:bare-url.2.1.6.framework/bare-url.2.1.6\",\"linked:libbare-fs.4.1.6.so\",\"linked:libbare-os.3.6.1.so\",\"linked:libbare-url.2.1.6.so\"],\"assets\":[],\"files\":{\"/backend/backend.mjs\":{\"offset\":0,\"length\":1075,\"mode\":420},\"/node_modules/b4a/index.js\":{\"offset\":1075,\"length\":4092,\"mode\":420},\"/node_modules/b4a/package.json\":{\"offset\":5167,\"length\":701,\"mode\":420},\"/node_modules/bare-events/index.js\":{\"offset\":5868,\"length\":7322,\"mode\":420},\"/node_modules/bare-events/lib/errors.js\":{\"offset\":13190,\"length\":711,\"mode\":420},\"/node_modules/bare-events/package.json\":{\"offset\":13901,\"length\":944,\"mode\":420},\"/node_modules/bare-fs/binding.js\":{\"offset\":14845,\"length\":33,\"mode\":420},\"/node_modules/bare-fs/index.js\":{\"offset\":14878,\"length\":59826,\"mode\":420},\"/node_modules/bare-fs/lib/constants.js\":{\"offset\":74704,\"length\":1494,\"mode\":420},\"/node_modules/bare-fs/package.json\":{\"offset\":76198,\"length\":1451,\"mode\":420},\"/node_modules/bare-os/binding.js\":{\"offset\":77649,\"length\":33,\"mode\":420},\"/node_modules/bare-os/index.js\":{\"offset\":77682,\"length\":2433,\"mode\":420},\"/node_modules/bare-os/lib/constants.js\":{\"offset\":80115,\"length\":113,\"mode\":420},\"/node_modules/bare-os/lib/errors.js\":{\"offset\":80228,\"length\":479,\"mode\":420},\"/node_modules/bare-os/package.json\":{\"offset\":80707,\"length\":1023,\"mode\":420},\"/node_modules/bare-path/index.js\":{\"offset\":81730,\"length\":306,\"mode\":420},\"/node_modules/bare-path/lib/constants.js\":{\"offset\":82036,\"length\":247,\"mode\":420},\"/node_modules/bare-path/lib/posix.js\":{\"offset\":82283,\"length\":5991,\"mode\":420},\"/node_modules/bare-path/lib/shared.js\":{\"offset\":88274,\"length\":1888,\"mode\":420},\"/node_modules/bare-path/lib/win32.js\":{\"offset\":90162,\"length\":13427,\"mode\":420},\"/node_modules/bare-path/package.json\":{\"offset\":103589,\"length\":796,\"mode\":420},\"/node_modules/bare-rpc/index.js\":{\"offset\":104385,\"length\":9588,\"mode\":420},\"/node_modules/bare-rpc/lib/command-router.js\":{\"offset\":113973,\"length\":1073,\"mode\":420},\"/node_modules/bare-rpc/lib/constants.js\":{\"offset\":115046,\"length\":270,\"mode\":420},\"/node_modules/bare-rpc/lib/errors.js\":{\"offset\":115316,\"length\":597,\"mode\":420},\"/node_modules/bare-rpc/lib/incoming-request.js\":{\"offset\":115913,\"length\":1106,\"mode\":420},\"/node_modules/bare-rpc/lib/incoming-stream.js\":{\"offset\":117019,\"length\":1177,\"mode\":420},\"/node_modules/bare-rpc/lib/messages.js\":{\"offset\":118196,\"length\":4149,\"mode\":420},\"/node_modules/bare-rpc/lib/outgoing-request.js\":{\"offset\":122345,\"length\":1488,\"mode\":420},\"/node_modules/bare-rpc/lib/outgoing-stream.js\":{\"offset\":123833,\"length\":2114,\"mode\":420},\"/node_modules/bare-rpc/package.json\":{\"offset\":125947,\"length\":1207,\"mode\":420},\"/node_modules/bare-stream/index.js\":{\"offset\":127154,\"length\":7649,\"mode\":420},\"/node_modules/bare-stream/package.json\":{\"offset\":134803,\"length\":1237,\"mode\":420},\"/node_modules/bare-url/binding.js\":{\"offset\":136040,\"length\":33,\"mode\":420},\"/node_modules/bare-url/index.js\":{\"offset\":136073,\"length\":7928,\"mode\":420},\"/node_modules/bare-url/lib/errors.js\":{\"offset\":144001,\"length\":881,\"mode\":420},\"/node_modules/bare-url/package.json\":{\"offset\":144882,\"length\":1104,\"mode\":420},\"/node_modules/compact-encoding/endian.js\":{\"offset\":145986,\"length\":103,\"mode\":420},\"/node_modules/compact-encoding/index.js\":{\"offset\":146089,\"length\":19082,\"mode\":420},\"/node_modules/compact-encoding/lexint.js\":{\"offset\":165171,\"length\":2824,\"mode\":420},\"/node_modules/compact-encoding/package.json\":{\"offset\":167995,\"length\":713,\"mode\":420},\"/node_modules/compact-encoding/raw.js\":{\"offset\":168708,\"length\":4118,\"mode\":420},\"/node_modules/fast-fifo/fixed-size.js\":{\"offset\":172826,\"length\":875,\"mode\":420},\"/node_modules/fast-fifo/index.js\":{\"offset\":173701,\"length\":972,\"mode\":420},\"/node_modules/fast-fifo/package.json\":{\"offset\":174673,\"length\":682,\"mode\":420},\"/node_modules/safety-catch/index.js\":{\"offset\":175355,\"length\":506,\"mode\":420},\"/node_modules/safety-catch/package.json\":{\"offset\":175861,\"length\":547,\"mode\":420},\"/node_modules/streamx/index.js\":{\"offset\":176408,\"length\":33340,\"mode\":420},\"/node_modules/streamx/package.json\":{\"offset\":209748,\"length\":912,\"mode\":420},\"/node_modules/text-decoder/index.js\":{\"offset\":210660,\"length\":1378,\"mode\":420},\"/node_modules/text-decoder/lib/pass-through-decoder.js\":{\"offset\":212038,\"length\":273,\"mode\":420},\"/node_modules/text-decoder/lib/utf8-decoder.js\":{\"offset\":212311,\"length\":2529,\"mode\":420},\"/node_modules/text-decoder/package.json\":{\"offset\":214840,\"length\":987,\"mode\":420},\"/package.json\":{\"offset\":215827,\"length\":1594,\"mode\":420},\"/rpc-commands.mjs\":{\"offset\":217421,\"length\":202,\"mode\":420}}}\n// /* global Bare, BareKit */\n\nimport RPC from 'bare-rpc';\nimport fs from 'bare-fs';\nimport URL from 'bare-url';\nconst { IPC } = BareKit;\n\nimport { RPC_INCREMENT, RPC_DECREMENT, RPC_UPDATE } from '../rpc-commands.mjs';\n\nconsole.log('Backend worklet initializing....');\n\nlet counter = 0;\n\nlet response;\nconst rpc = new RPC(IPC, req => {\n  console.log('RPC request received:', req);\n\n  switch (req.command) {\n    case RPC_INCREMENT:\n      counter++;\n      console.log('Counter incremented:', counter);\n      response = rpc.request(RPC_UPDATE);\n      response.send(String(counter));\n      break;\n\n    case RPC_DECREMENT:\n      counter--;\n      console.log('Counter decremented:', counter);\n      response = rpc.request(RPC_UPDATE);\n      response.send(String(counter));\n      break;\n\n    case RPC_GET_COUNT:\n      console.log('Current counter value:', counter);\n      response = rpc.request(RPC_UPDATE);\n      response.send(String(counter));\n      break;\n\n    default:\n      console.error('Unknown RPC command:', req.command);\n      return { error: 'Unknown command' };\n  }\n});\nfunction isBuffer (value) {\n  return Buffer.isBuffer(value) || value instanceof Uint8Array\n}\n\nfunction isEncoding (encoding) {\n  return Buffer.isEncoding(encoding)\n}\n\nfunction alloc (size, fill, encoding) {\n  return Buffer.alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  return Buffer.allocUnsafe(size)\n}\n\nfunction allocUnsafeSlow (size) {\n  return Buffer.allocUnsafeSlow(size)\n}\n\nfunction byteLength (string, encoding) {\n  return Buffer.byteLength(string, encoding)\n}\n\nfunction compare (a, b) {\n  return Buffer.compare(a, b)\n}\n\nfunction concat (buffers, totalLength) {\n  return Buffer.concat(buffers, totalLength)\n}\n\nfunction copy (source, target, targetStart, start, end) {\n  return toBuffer(source).copy(target, targetStart, start, end)\n}\n\nfunction equals (a, b) {\n  return toBuffer(a).equals(b)\n}\n\nfunction fill (buffer, value, offset, end, encoding) {\n  return toBuffer(buffer).fill(value, offset, end, encoding)\n}\n\nfunction from (value, encodingOrOffset, length) {\n  return Buffer.from(value, encodingOrOffset, length)\n}\n\nfunction includes (buffer, value, byteOffset, encoding) {\n  return toBuffer(buffer).includes(value, byteOffset, encoding)\n}\n\nfunction indexOf (buffer, value, byfeOffset, encoding) {\n  return toBuffer(buffer).indexOf(value, byfeOffset, encoding)\n}\n\nfunction lastIndexOf (buffer, value, byteOffset, encoding) {\n  return toBuffer(buffer).lastIndexOf(value, byteOffset, encoding)\n}\n\nfunction swap16 (buffer) {\n  return toBuffer(buffer).swap16()\n}\n\nfunction swap32 (buffer) {\n  return toBuffer(buffer).swap32()\n}\n\nfunction swap64 (buffer) {\n  return toBuffer(buffer).swap64()\n}\n\nfunction toBuffer (buffer) {\n  if (Buffer.isBuffer(buffer)) return buffer\n  return Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n}\n\nfunction toString (buffer, encoding, start, end) {\n  return toBuffer(buffer).toString(encoding, start, end)\n}\n\nfunction write (buffer, string, offset, length, encoding) {\n  return toBuffer(buffer).write(string, offset, length, encoding)\n}\n\nfunction writeDoubleLE (buffer, value, offset) {\n  return toBuffer(buffer).writeDoubleLE(value, offset)\n}\n\nfunction writeFloatLE (buffer, value, offset) {\n  return toBuffer(buffer).writeFloatLE(value, offset)\n}\n\nfunction writeUInt32LE (buffer, value, offset) {\n  return toBuffer(buffer).writeUInt32LE(value, offset)\n}\n\nfunction writeInt32LE (buffer, value, offset) {\n  return toBuffer(buffer).writeInt32LE(value, offset)\n}\n\nfunction readDoubleLE (buffer, offset) {\n  return toBuffer(buffer).readDoubleLE(offset)\n}\n\nfunction readFloatLE (buffer, offset) {\n  return toBuffer(buffer).readFloatLE(offset)\n}\n\nfunction readUInt32LE (buffer, offset) {\n  return toBuffer(buffer).readUInt32LE(offset)\n}\n\nfunction readInt32LE (buffer, offset) {\n  return toBuffer(buffer).readInt32LE(offset)\n}\n\nfunction writeDoubleBE (buffer, value, offset) {\n  return toBuffer(buffer).writeDoubleBE(value, offset)\n}\n\nfunction writeFloatBE (buffer, value, offset) {\n  return toBuffer(buffer).writeFloatBE(value, offset)\n}\n\nfunction writeUInt32BE (buffer, value, offset) {\n  return toBuffer(buffer).writeUInt32BE(value, offset)\n}\n\nfunction writeInt32BE (buffer, value, offset) {\n  return toBuffer(buffer).writeInt32BE(value, offset)\n}\n\nfunction readDoubleBE (buffer, offset) {\n  return toBuffer(buffer).readDoubleBE(offset)\n}\n\nfunction readFloatBE (buffer, offset) {\n  return toBuffer(buffer).readFloatBE(offset)\n}\n\nfunction readUInt32BE (buffer, offset) {\n  return toBuffer(buffer).readUInt32BE(offset)\n}\n\nfunction readInt32BE (buffer, offset) {\n  return toBuffer(buffer).readInt32BE(offset)\n}\n\nmodule.exports = {\n  isBuffer,\n  isEncoding,\n  alloc,\n  allocUnsafe,\n  allocUnsafeSlow,\n  byteLength,\n  compare,\n  concat,\n  copy,\n  equals,\n  fill,\n  from,\n  includes,\n  indexOf,\n  lastIndexOf,\n  swap16,\n  swap32,\n  swap64,\n  toBuffer,\n  toString,\n  write,\n  writeDoubleLE,\n  writeFloatLE,\n  writeUInt32LE,\n  writeInt32LE,\n  readDoubleLE,\n  readFloatLE,\n  readUInt32LE,\n  readInt32LE,\n  writeDoubleBE,\n  writeFloatBE,\n  writeUInt32BE,\n  writeInt32BE,\n  readDoubleBE,\n  readFloatBE,\n  readUInt32BE,\n  readInt32BE\n\n}\n{\n  \"name\": \"b4a\",\n  \"version\": \"1.6.7\",\n  \"description\": \"Bridging the gap between buffers and typed arrays\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"browser.js\",\n    \"index.js\",\n    \"lib\"\n  ],\n  \"browser\": {\n    \"./index.js\": \"./browser.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/b4a.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/b4a/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/b4a#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.5.2\",\n    \"nanobench\": \"^3.0.0\",\n    \"standard\": \"^17.1.0\"\n  }\n}\nconst errors = require('./lib/errors')\n\nclass EventListener {\n  constructor() {\n    this.list = []\n    this.count = 0\n  }\n\n  append(ctx, name, fn, once) {\n    this.count++\n    ctx.emit('newListener', name, fn) // Emit BEFORE adding\n    this.list.push([fn, once])\n  }\n\n  prepend(ctx, name, fn, once) {\n    this.count++\n    ctx.emit('newListener', name, fn) // Emit BEFORE adding\n    this.list.unshift([fn, once])\n  }\n\n  remove(ctx, name, fn) {\n    for (let i = 0, n = this.list.length; i < n; i++) {\n      const l = this.list[i]\n\n      if (l[0] === fn) {\n        this.list.splice(i, 1)\n\n        if (this.count === 1) delete ctx._events[name]\n\n        ctx.emit('removeListener', name, fn) // Emit AFTER removing\n\n        this.count--\n        return\n      }\n    }\n  }\n\n  removeAll(ctx, name) {\n    const list = [...this.list]\n    this.list = []\n\n    if (this.count === list.length) delete ctx._events[name]\n\n    for (let i = list.length - 1; i >= 0; i--) {\n      ctx.emit('removeListener', name, list[i][0]) // Emit AFTER removing\n    }\n\n    this.count -= list.length\n  }\n\n  emit(ctx, name, ...args) {\n    const list = [...this.list]\n\n    for (let i = 0, n = list.length; i < n; i++) {\n      const l = list[i]\n\n      if (l[1] === true) this.remove(ctx, name, l[0])\n\n      l[0].call(ctx, ...args)\n    }\n\n    return list.length > 0\n  }\n}\n\nfunction appendListener(ctx, name, fn, once) {\n  const e = ctx._events[name] || (ctx._events[name] = new EventListener())\n  e.append(ctx, name, fn, once)\n  return ctx\n}\n\nfunction prependListener(ctx, name, fn, once) {\n  const e = ctx._events[name] || (ctx._events[name] = new EventListener())\n  e.prepend(ctx, name, fn, once)\n  return ctx\n}\n\nfunction removeListener(ctx, name, fn) {\n  const e = ctx._events[name]\n  if (e !== undefined) e.remove(ctx, name, fn)\n  return ctx\n}\n\nfunction throwUnhandledError(...args) {\n  let err\n\n  if (args.length > 0) err = args[0]\n\n  if (err instanceof Error === false) err = errors.UNHANDLED_ERROR(err)\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(err, exports.prototype.emit)\n  }\n\n  queueMicrotask(() => {\n    throw err\n  })\n}\n\nmodule.exports = exports = class EventEmitter {\n  constructor() {\n    this._events = Object.create(null)\n  }\n\n  addListener(name, fn) {\n    return appendListener(this, name, fn, false)\n  }\n\n  addOnceListener(name, fn) {\n    return appendListener(this, name, fn, true)\n  }\n\n  prependListener(name, fn) {\n    return prependListener(this, name, fn, false)\n  }\n\n  prependOnceListener(name, fn) {\n    return prependListener(this, name, fn, true)\n  }\n\n  removeListener(name, fn) {\n    return removeListener(this, name, fn)\n  }\n\n  on(name, fn) {\n    return appendListener(this, name, fn, false)\n  }\n\n  once(name, fn) {\n    return appendListener(this, name, fn, true)\n  }\n\n  off(name, fn) {\n    return removeListener(this, name, fn)\n  }\n\n  emit(name, ...args) {\n    if (name === 'error' && this._events.error === undefined) {\n      throwUnhandledError(...args)\n    }\n\n    const e = this._events[name]\n    return e === undefined ? false : e.emit(this, name, ...args)\n  }\n\n  listeners(name) {\n    const e = this._events[name]\n    return e === undefined ? [] : [...e.list]\n  }\n\n  listenerCount(name) {\n    const e = this._events[name]\n    return e === undefined ? 0 : e.list.length\n  }\n\n  getMaxListeners() {\n    return EventEmitter.defaultMaxListeners\n  }\n\n  setMaxListeners(n) {}\n\n  removeAllListeners(name) {\n    if (arguments.length === 0) {\n      for (const key of Reflect.ownKeys(this._events)) {\n        if (key === 'removeListener') continue\n        this.removeAllListeners(key)\n      }\n      this.removeAllListeners('removeListener')\n    } else {\n      const e = this._events[name]\n      if (e !== undefined) e.removeAll(this, name)\n    }\n    return this\n  }\n}\n\nexports.EventEmitter = exports\n\nexports.errors = errors\n\nexports.defaultMaxListeners = 10\n\nexports.on = function on(emitter, name, opts = {}) {\n  const { signal } = opts\n\n  if (signal && signal.aborted) {\n    throw errors.OPERATION_ABORTED(signal.reason)\n  }\n\n  let error = null\n  let done = false\n\n  const events = []\n  const promises = []\n\n  emitter.on(name, onevent)\n\n  if (name !== 'error') emitter.on('error', onerror)\n\n  if (signal) signal.addEventListener('abort', onabort)\n\n  return {\n    next() {\n      if (events.length) {\n        return Promise.resolve({ value: events.shift(), done: false })\n      }\n\n      if (error) {\n        const err = error\n\n        error = null\n\n        return Promise.reject(err)\n      }\n\n      if (done) return onclose()\n\n      return new Promise((resolve, reject) =>\n        promises.push({ resolve, reject })\n      )\n    },\n\n    return() {\n      return onclose()\n    },\n\n    throw(err) {\n      return onerror(err)\n    },\n\n    [Symbol.asyncIterator]() {\n      return this\n    }\n  }\n\n  function onevent(...args) {\n    if (promises.length) {\n      promises.shift().resolve({ value: args, done: false })\n    } else {\n      events.push(args)\n    }\n  }\n\n  function onerror(err) {\n    if (promises.length) {\n      promises.shift().reject(err)\n    } else {\n      error = err\n    }\n\n    return Promise.resolve({ done: true })\n  }\n\n  function onabort() {\n    onerror(errors.OPERATION_ABORTED(signal.reason))\n  }\n\n  function onclose() {\n    emitter.off(name, onevent)\n\n    if (name !== 'error') emitter.off('error', onerror)\n\n    if (signal) signal.removeEventListener('abort', onabort)\n\n    done = true\n\n    if (promises.length) promises.shift().resolve({ done: true })\n\n    return Promise.resolve({ done: true })\n  }\n}\n\nexports.once = function once(emitter, name, opts = {}) {\n  const { signal } = opts\n\n  if (signal && signal.aborted) {\n    throw errors.OPERATION_ABORTED(signal.reason)\n  }\n\n  return new Promise((resolve, reject) => {\n    if (name !== 'error') emitter.on('error', onerror)\n\n    if (signal) signal.addEventListener('abort', onabort)\n\n    emitter.once(name, (...args) => {\n      if (name !== 'error') emitter.off('error', onerror)\n\n      if (signal) signal.removeEventListener('abort', onabort)\n\n      resolve(args)\n    })\n\n    function onerror(err) {\n      emitter.off('error', onerror)\n\n      reject(err)\n    }\n\n    function onabort() {\n      signal.removeEventListener('abort', onabort)\n\n      onerror(errors.OPERATION_ABORTED(signal.reason))\n    }\n  })\n}\n\nexports.forward = function forward(from, to, names, opts = {}) {\n  if (typeof names === 'string') names = [names]\n\n  const { emit = to.emit.bind(to) } = opts\n\n  const listeners = names.map(\n    (name) =>\n      function onevent(...args) {\n        emit(name, ...args)\n      }\n  )\n\n  to.on('newListener', (name) => {\n    const i = names.indexOf(name)\n\n    if (i !== -1 && to.listenerCount(name) === 0) {\n      from.on(name, listeners[i])\n    }\n  }).on('removeListener', (name) => {\n    const i = names.indexOf(name)\n\n    if (i !== -1 && to.listenerCount(name) === 0) {\n      from.off(name, listeners[i])\n    }\n  })\n}\n\nexports.listenerCount = function listenerCount(emitter, name) {\n  return emitter.listenerCount(name)\n}\n\nexports.getMaxListeners = function getMaxListeners(emitter) {\n  return emitter.getMaxListeners()\n}\n\nexports.setMaxListeners = function setMaxListeners(n, ...emitters) {\n  if (emitters.length === 0) exports.defaultMaxListeners = n\n  else {\n    for (const emitter of emitters) {\n      emitter.setMaxListeners(n)\n    }\n  }\n}\nmodule.exports = class EventEmitterError extends Error {\n  constructor(msg, code, fn = EventEmitterError, opts) {\n    super(`${code}: ${msg}`, opts)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'EventEmitterError'\n  }\n\n  static OPERATION_ABORTED(cause, msg = 'Operation aborted') {\n    return new EventEmitterError(\n      msg,\n      'OPERATION_ABORTED',\n      EventEmitterError.OPERATION_ABORTED,\n      { cause }\n    )\n  }\n\n  static UNHANDLED_ERROR(cause, msg = 'Unhandled error') {\n    return new EventEmitterError(\n      msg,\n      'UNHANDLED_ERROR',\n      EventEmitterError.UNHANDLED_ERROR,\n      { cause }\n    )\n  }\n}\n{\n  \"name\": \"bare-events\",\n  \"version\": \"2.6.0\",\n  \"description\": \"Event emitters for JavaScript\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./errors\": \"./lib/errors.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test.js\",\n    \"test:node\": \"node test.js\",\n    \"lint\": \"prettier . --check\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-events.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-events/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-events#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  }\n}\nmodule.exports = require.addon()\nconst EventEmitter = require('bare-events')\nconst path = require('bare-path')\nconst { Readable, Writable } = require('bare-stream')\nconst binding = require('./binding')\nconst constants = require('./lib/constants')\n\nconst isWindows = Bare.platform === 'win32'\n\nexports.constants = constants\n\n// Lightly-modified from the Node FS internal utils.\nfunction flagsToNumber(flags) {\n  switch (flags) {\n    case 'r':\n      return constants.O_RDONLY\n    case 'rs': // Fall through.\n    case 'sr':\n      return constants.O_RDONLY | constants.O_SYNC\n    case 'r+':\n      return constants.O_RDWR\n    case 'rs+': // Fall through.\n    case 'sr+':\n      return constants.O_RDWR | constants.O_SYNC\n\n    case 'w':\n      return constants.O_TRUNC | constants.O_CREAT | constants.O_WRONLY\n    case 'wx': // Fall through.\n    case 'xw':\n      return (\n        constants.O_TRUNC |\n        constants.O_CREAT |\n        constants.O_WRONLY |\n        constants.O_EXCL\n      )\n\n    case 'w+':\n      return constants.O_TRUNC | constants.O_CREAT | constants.O_RDWR\n    case 'wx+': // Fall through.\n    case 'xw+':\n      return (\n        constants.O_TRUNC |\n        constants.O_CREAT |\n        constants.O_RDWR |\n        constants.O_EXCL\n      )\n\n    case 'a':\n      return constants.O_APPEND | constants.O_CREAT | constants.O_WRONLY\n    case 'ax': // Fall through.\n    case 'xa':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_WRONLY |\n        constants.O_EXCL\n      )\n    case 'as': // Fall through.\n    case 'sa':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_WRONLY |\n        constants.O_SYNC\n      )\n\n    case 'a+':\n      return constants.O_APPEND | constants.O_CREAT | constants.O_RDWR\n    case 'ax+': // Fall through.\n    case 'xa+':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_RDWR |\n        constants.O_EXCL\n      )\n    case 'as+': // Fall through.\n    case 'sa+':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_RDWR |\n        constants.O_SYNC\n      )\n  }\n\n  throw typeError('ERR_INVALID_ARG_VALUE', `Invalid value in flags: ${flags}`)\n}\n\nfunction modeToNumber(mode) {\n  mode = parseInt(mode, 8)\n  if (isNaN(mode))\n    throw typeError(\n      'ERR_INVALID_ARG_VALUE',\n      'Mode must be a number or octal string'\n    )\n  return mode\n}\n\nconst free = []\n\nfunction alloc() {\n  const req = { handle: null, callback: null }\n  req.handle = binding.init(req, onresponse)\n  return req\n}\n\nfunction getReq() {\n  return free.length ? free.pop() : alloc()\n}\n\nfunction onresponse(err, result) {\n  const req = this\n  const cb = req.callback\n  req.callback = null\n  free.push(req)\n  cb(err, result)\n}\n\nfunction open(filepath, flags, mode, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    if (typeof flags === 'function') {\n      cb = flags\n      flags = 'r'\n      mode = 0o666\n    } else if (typeof mode === 'function') {\n      cb = mode\n      mode = 0o666\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  if (typeof flags === 'string') flags = flagsToNumber(flags)\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  const req = getReq()\n  req.callback = cb\n  binding.open(req.handle, toNamespacedPath(filepath), flags, mode)\n}\n\nfunction openSync(filepath, flags = 'r', mode = 0o666) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof flags === 'string') flags = flagsToNumber(flags)\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  return binding.openSync(toNamespacedPath(filepath), flags, mode)\n}\n\nfunction close(fd, cb = noop) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.close(req.handle, fd)\n}\n\nfunction closeSync(fd) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  return binding.closeSync(fd)\n}\n\nfunction access(filepath, mode, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    if (typeof mode === 'function') {\n      cb = mode\n      mode = constants.F_OK\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.access(req.handle, toNamespacedPath(filepath), mode)\n}\n\nfunction accessSync(filepath, mode = constants.F_OK) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  binding.accessSync(toNamespacedPath(filepath), mode)\n}\n\nfunction exists(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  return access(toNamespacedPath(filepath), (err) => cb(!!err))\n}\n\nfunction existsSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  try {\n    accessSync(toNamespacedPath(filepath))\n    return true\n  } catch {\n    return false\n  }\n}\n\nfunction read(fd, buffer, offset, len, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (!Buffer.isBuffer(buffer) && !ArrayBuffer.isView(buffer)) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Buffer must be a buffer. Received type ' +\n        typeof buffer +\n        ' (' +\n        buffer +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    if (typeof offset === 'function') {\n      cb = offset\n      offset = 0\n      len = buffer.byteLength\n      pos = -1\n    } else if (typeof len === 'function') {\n      cb = len\n      len = buffer.byteLength - offset\n      pos = -1\n    } else if (typeof pos === 'function') {\n      cb = pos\n      pos = -1\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.read(req.handle, fd, buffer, offset, len, pos)\n}\n\nfunction readSync(\n  fd,\n  buffer,\n  offset = 0,\n  len = buffer.byteLength - offset,\n  pos = -1\n) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (!Buffer.isBuffer(buffer) && !ArrayBuffer.isView(buffer)) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Buffer must be a buffer. Received type ' +\n        typeof buffer +\n        ' (' +\n        buffer +\n        ')'\n    )\n  }\n\n  return binding.readSync(fd, buffer, offset, len, pos)\n}\n\nfunction readv(fd, buffers, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof pos === 'function') {\n    cb = pos\n    pos = -1\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.readv(req.handle, fd, buffers, pos)\n}\n\nfunction write(fd, data, offset, len, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof data === 'string') {\n    let encoding = len\n    cb = pos\n    pos = offset\n\n    if (typeof cb !== 'function') {\n      if (typeof pos === 'function') {\n        cb = pos\n        pos = -1\n        encoding = 'utf8'\n      } else if (typeof encoding === 'function') {\n        cb = encoding\n        encoding = 'utf8'\n      } else {\n        throw typeError(\n          'ERR_INVALID_ARG_TYPE',\n          'Callback must be a function. Received type ' +\n            typeof cb +\n            ' (' +\n            cb +\n            ')'\n        )\n      }\n    }\n\n    if (typeof pos === 'string') {\n      encoding = pos\n      pos = -1\n    }\n\n    data = Buffer.from(data, encoding)\n    offset = 0\n    len = data.byteLength\n  } else if (typeof cb !== 'function') {\n    if (typeof offset === 'function') {\n      cb = offset\n      offset = 0\n      len = data.byteLength\n      pos = -1\n    } else if (typeof len === 'function') {\n      cb = len\n      len = data.byteLength - offset\n      pos = -1\n    } else if (typeof pos === 'function') {\n      cb = pos\n      pos = -1\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.write(req.handle, fd, data, offset, len, pos)\n}\n\nfunction writeSync(fd, data, offset = 0, len, pos) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof data === 'string') data = Buffer.from(data)\n\n  if (typeof len !== 'number') len = data.byteLength - offset\n\n  if (typeof pos !== 'number') pos = -1\n\n  return binding.writeSync(fd, data, offset, len, pos)\n}\n\nfunction writev(fd, buffers, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof pos === 'function') {\n    cb = pos\n    pos = -1\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.writev(req.handle, fd, buffers, pos)\n}\n\nfunction stat(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const data = new Array(Stats.length)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) cb(err, null)\n    else cb(null, new Stats(...data))\n  }\n\n  binding.stat(req.handle, toNamespacedPath(filepath), data)\n}\n\nfunction statSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  return new Stats(...binding.statSync(toNamespacedPath(filepath)))\n}\n\nfunction lstat(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const data = new Array(Stats.length)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) cb(err, null)\n    else cb(null, new Stats(...data))\n  }\n\n  binding.lstat(req.handle, toNamespacedPath(filepath), data)\n}\n\nfunction lstatSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  return new Stats(...binding.lstatSync(toNamespacedPath(filepath)))\n}\n\nfunction fstat(fd, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const data = new Array(Stats.length)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) cb(err, null)\n    else cb(null, new Stats(...data))\n  }\n\n  binding.fstat(req.handle, fd, data)\n}\n\nfunction fstatSync(fd) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  return new Stats(...binding.fstatSync(fd))\n}\n\nfunction ftruncate(fd, len, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof len === 'function') {\n    cb = len\n    len = 0\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof len !== 'number') len = 0\n\n  const req = getReq()\n  req.callback = cb\n  binding.ftruncate(req.handle, fd, len)\n}\n\nfunction ftruncateSync(fd, len) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof len !== 'number') len = 0\n\n  binding.ftruncateSync(fd, len)\n}\n\nfunction chmod(filepath, mode, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  const req = getReq()\n  req.callback = cb\n  binding.chmod(req.handle, toNamespacedPath(filepath), mode)\n}\n\nfunction chmodSync(filepath, mode) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  binding.chmodSync(toNamespacedPath(filepath), mode)\n}\n\nfunction fchmod(fd, mode, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  const req = getReq()\n  req.callback = cb\n  binding.fchmod(req.handle, fd, mode)\n}\n\nfunction fchmodSync(fd, mode) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  binding.fchmodSync(fd, mode)\n}\n\nfunction mkdirRecursive(filepath, mode, cb) {\n  filepath = toNamespacedPath(filepath)\n\n  mkdir(filepath, { mode }, function (err) {\n    if (err === null) return cb(null, 0, null)\n\n    if (err.code !== 'ENOENT') {\n      stat(filepath, function (e, st) {\n        if (e) return cb(e, e.errno, null)\n        if (st.isDirectory()) return cb(null, 0, null)\n        cb(err, err.errno, null)\n      })\n      return\n    }\n\n    while (filepath.endsWith(path.sep)) filepath = filepath.slice(0, -1)\n    const i = filepath.lastIndexOf(path.sep)\n    if (i <= 0) return cb(err, err.errno, null)\n\n    mkdirRecursive(filepath.slice(0, i), mode, function (err) {\n      if (err) return cb(err, err.errno, null)\n\n      mkdir(filepath, { mode }, function (err) {\n        if (err === null) return cb(null, 0, null)\n\n        stat(filepath, function (e, st) {\n          if (e) return cb(e, e.errno, null)\n          if (st.isDirectory()) return cb(null, 0, null)\n          cb(err, err.errno, null)\n        })\n      })\n    })\n  })\n}\n\nfunction mkdir(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = { mode: 0o777 }\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'number') opts = { mode: opts }\n  else if (!opts) opts = {}\n\n  const mode = typeof opts.mode === 'number' ? opts.mode : 0o777\n\n  filepath = toNamespacedPath(filepath)\n\n  if (opts.recursive) return mkdirRecursive(filepath, mode, cb)\n\n  const req = getReq()\n  req.callback = cb\n  binding.mkdir(req.handle, filepath, mode)\n}\n\nfunction mkdirRecursiveSync(filepath, mode) {\n  filepath = toNamespacedPath(filepath)\n\n  try {\n    mkdirSync(filepath, { mode })\n  } catch (err) {\n    if (err.code !== 'ENOENT' && statSync(filepath).isDirectory()) {\n      return\n    }\n\n    while (filepath.endsWith(path.sep)) filepath = filepath.slice(0, -1)\n    const i = filepath.lastIndexOf(path.sep)\n    if (i <= 0) throw err\n\n    mkdirRecursiveSync(filepath.slice(0, i), { mode })\n\n    try {\n      mkdirSync(filepath, { mode })\n    } catch (err) {\n      if (statSync(filepath).isDirectory()) {\n        return\n      }\n\n      throw err\n    }\n  }\n}\n\nfunction mkdirSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'number') opts = { mode: opts }\n  else if (!opts) opts = {}\n\n  const mode = typeof opts.mode === 'number' ? opts.mode : 0o777\n\n  filepath = toNamespacedPath(filepath)\n\n  if (opts.recursive) return mkdirRecursiveSync(filepath, mode)\n\n  binding.mkdirSync(filepath, mode)\n}\n\nfunction rmdir(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.rmdir(req.handle, toNamespacedPath(filepath))\n}\n\nfunction rmdirSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  binding.rmdirSync(toNamespacedPath(filepath))\n}\n\nfunction rmRecursive(filepath, opts, cb) {\n  filepath = toNamespacedPath(filepath)\n\n  rmdir(filepath, function (err) {\n    if (err === null) return cb(null)\n\n    if (err.code !== 'ENOTEMPTY') return cb(err)\n\n    readdir(filepath, function (err, files) {\n      if (err) return cb(err)\n\n      if (files.length === 0) return rmdir(filepath, cb)\n\n      let missing = files.length\n      let done = false\n\n      for (const file of files) {\n        rm(filepath + path.sep + file, opts, function (err) {\n          if (done) return\n\n          if (err) {\n            done = true\n            return cb(err)\n          }\n\n          if (--missing === 0) rmdir(filepath, cb)\n        })\n      }\n    })\n  })\n}\n\nfunction rm(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (!opts) opts = {}\n\n  filepath = toNamespacedPath(filepath)\n\n  lstat(filepath, function (err, st) {\n    if (err) {\n      return cb(err.code === 'ENOENT' && opts.force ? null : err)\n    }\n\n    if (st.isDirectory()) {\n      if (opts.recursive) return rmRecursive(filepath, opts, cb)\n\n      const err = new Error('is a directory')\n      err.code = 'EISDIR'\n      return cb(err)\n    }\n\n    unlink(filepath, cb)\n  })\n}\n\nfunction rmRecursiveSync(filepath, opts) {\n  filepath = toNamespacedPath(filepath)\n\n  try {\n    rmdirSync(filepath)\n  } catch (err) {\n    if (err.code !== 'ENOTEMPTY') throw err\n\n    const files = readdirSync(filepath)\n\n    for (const file of files) {\n      rmSync(filepath + path.sep + file, opts)\n    }\n\n    rmdirSync(filepath)\n  }\n}\n\nfunction rmSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (!opts) opts = {}\n\n  filepath = toNamespacedPath(filepath)\n\n  try {\n    const st = lstatSync(filepath)\n\n    if (st.isDirectory()) {\n      if (opts.recursive) return rmRecursiveSync(filepath, opts)\n\n      const err = new Error('is a directory')\n      err.code = 'EISDIR'\n      throw err\n    }\n\n    unlinkSync(filepath)\n  } catch (err) {\n    if (err.code !== 'ENOENT' || !opts.force) throw err\n  }\n}\n\nfunction unlink(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.unlink(req.handle, toNamespacedPath(filepath))\n}\n\nfunction unlinkSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  binding.unlinkSync(toNamespacedPath(filepath))\n}\n\nfunction rename(src, dst, cb) {\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.rename(req.handle, src, dst)\n}\n\nfunction renameSync(src, dst) {\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  binding.renameSync(src, dst)\n}\n\nfunction copyFile(src, dst, mode, cb) {\n  if (typeof mode === 'function') {\n    cb = mode\n    mode = 0\n  }\n\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.copyfile(req.handle, src, dst, mode)\n}\n\nfunction copyFileSync(src, dst, mode = 0) {\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  binding.copyfileSync(src, dst, mode)\n}\n\nfunction realpath(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) return cb(err, null)\n    let path = data.subarray(0, data.indexOf(0))\n    if (encoding !== 'buffer') path = path.toString(encoding)\n    cb(null, path)\n  }\n\n  binding.realpath(req.handle, toNamespacedPath(filepath), data)\n}\n\nfunction realpathSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  binding.realpathSync(toNamespacedPath(filepath), data)\n\n  filepath = data.subarray(0, data.indexOf(0))\n  if (encoding !== 'buffer') filepath = filepath.toString(encoding)\n  return filepath\n}\n\nfunction readlink(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) return cb(err, null)\n    let path = data.subarray(0, data.indexOf(0))\n    if (encoding !== 'buffer') path = path.toString(encoding)\n    cb(null, path)\n  }\n\n  binding.readlink(req.handle, toNamespacedPath(filepath), data)\n}\n\nfunction readlinkSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  binding.readlinkSync(toNamespacedPath(filepath), data)\n\n  filepath = data.subarray(0, data.indexOf(0))\n  if (encoding !== 'buffer') filepath = filepath.toString(encoding)\n  return filepath\n}\n\nfunction normalizeSymlinkTarget(target, type, filepath) {\n  if (isWindows) {\n    if (type === 'junction') target = path.resolve(filepath, '..', target)\n\n    if (path.isAbsolute(target)) return path.toNamespacedPath(target)\n\n    return target.replace(/\\//g, path.sep)\n  }\n\n  return target\n}\n\nfunction symlink(target, filepath, type, cb) {\n  if (typeof target !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Target must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof type === 'function') {\n    cb = type\n    type = null\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  filepath = toNamespacedPath(filepath)\n\n  if (typeof type === 'string') {\n    switch (type) {\n      case 'file':\n        type = 0\n        break\n      case 'dir':\n        type = constants.UV_FS_SYMLINK_DIR\n        break\n      case 'junction':\n        type = constants.UV_FS_SYMLINK_JUNCTION\n        break\n      default:\n        throw typeError(\n          'ERR_FS_INVALID_SYMLINK_TYPE',\n          'Symlink type must be one of \"dir\", \"file\", or \"junction\". Received \"' +\n            type +\n            '\"'\n        )\n    }\n  } else if (typeof type !== 'number') {\n    if (isWindows) {\n      target = path.resolve(filepath, '..', target)\n\n      stat(target, (err, st) => {\n        type =\n          err === null && st.isDirectory()\n            ? constants.UV_FS_SYMLINK_DIR\n            : constants.UV_FS_SYMLINK_JUNCTION\n\n        symlink(target, filepath, type, cb)\n      })\n\n      return\n    }\n\n    type = 0\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.symlink(req.handle, normalizeSymlinkTarget(target), filepath, type)\n}\n\nfunction symlinkSync(target, filepath, type) {\n  if (typeof target !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Target must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  filepath = toNamespacedPath(filepath)\n\n  if (typeof type === 'string') {\n    switch (type) {\n      case 'file':\n        type = 0\n        break\n      case 'dir':\n        type = constants.UV_FS_SYMLINK_DIR\n        break\n      case 'junction':\n        type = constants.UV_FS_SYMLINK_JUNCTION\n        break\n      default:\n        throw typeError(\n          'ERR_FS_INVALID_SYMLINK_TYPE',\n          'Symlink type must be one of \"dir\", \"file\", or \"junction\". Received \"' +\n            type +\n            '\"'\n        )\n    }\n  } else if (typeof type !== 'number') {\n    if (isWindows) {\n      target = path.resolve(filepath, '..', target)\n\n      type = statSync(target).isDirectory()\n        ? constants.UV_FS_SYMLINK_DIR\n        : constants.UV_FS_SYMLINK_JUNCTION\n    } else {\n      type = 0\n    }\n  }\n\n  binding.symlinkSync(normalizeSymlinkTarget(target), filepath, type)\n}\n\nfunction opendir(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  filepath = toNamespacedPath(filepath)\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSDir)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) return cb(err, null)\n    cb(null, new Dir(filepath, data, opts))\n  }\n\n  binding.opendir(req.handle, filepath, data)\n}\n\nfunction opendirSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  filepath = toNamespacedPath(filepath)\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSDir)\n  binding.opendirSync(filepath, data)\n  return new Dir(filepath, data, opts)\n}\n\nfunction readdir(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { withFileTypes = false } = opts\n\n  opendir(toNamespacedPath(filepath), opts, async (err, dir) => {\n    if (err) return cb(err, null)\n    const result = []\n    for await (const entry of dir) {\n      result.push(withFileTypes ? entry : entry.name)\n    }\n    cb(null, result)\n  })\n}\n\nfunction readdirSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { withFileTypes = false } = opts\n\n  const dir = opendirSync(toNamespacedPath(filepath), opts)\n  const result = []\n\n  while (true) {\n    const entry = dir.readSync()\n    if (entry === null) break\n    result.push(withFileTypes ? entry : entry.name)\n  }\n\n  return result\n}\n\nfunction readFile(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'buffer' } = opts\n\n  open(filepath, opts.flag || 'r', function (err, fd) {\n    if (err) return cb(err)\n\n    fstat(fd, function (err, st) {\n      if (err) return closeAndError(err)\n\n      let buffer = Buffer.allocUnsafe(st.size)\n      let len = 0\n\n      read(fd, buffer, loop)\n\n      function loop(err, r) {\n        if (err) return closeAndError(err)\n        len += r\n        if (r === 0 || len === buffer.byteLength) return done()\n        read(fd, buffer.subarray(len), loop)\n      }\n\n      function done() {\n        if (len !== buffer.byteLength) buffer = buffer.subarray(0, len)\n        close(fd, function (err) {\n          if (err) return cb(err)\n          if (encoding !== 'buffer') buffer = buffer.toString(encoding)\n          cb(null, buffer)\n        })\n      }\n    })\n\n    function closeAndError(err) {\n      close(fd, function () {\n        cb(err)\n      })\n    }\n  })\n}\n\nfunction readFileSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'buffer' } = opts\n\n  const fd = openSync(filepath, opts.flag || 'r')\n\n  try {\n    const st = fstatSync(fd)\n\n    let buffer = Buffer.allocUnsafe(st.size)\n    let len = 0\n\n    while (true) {\n      const r = readSync(fd, len ? buffer.subarray(len) : buffer)\n      len += r\n      if (r === 0 || len === buffer.byteLength) break\n    }\n\n    if (len !== buffer.byteLength) buffer = buffer.subarray(0, len)\n    if (encoding !== 'buffer') buffer = buffer.toString(encoding)\n    return buffer\n  } finally {\n    try {\n      closeSync(fd)\n    } catch {}\n  }\n}\n\nfunction writeFile(filepath, data, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  if (typeof data === 'string') data = Buffer.from(data, opts.encoding)\n\n  open(filepath, opts.flag || 'w', opts.mode || 0o666, function (err, fd) {\n    if (err) return cb(err)\n\n    write(fd, data, loop)\n\n    function loop(err, w) {\n      if (err) return closeAndError(err)\n      if (w === data.byteLength) return done()\n      write(fd, data.subarray(w), loop)\n    }\n\n    function done() {\n      close(fd, function (err) {\n        if (err) return cb(err)\n        return cb(null)\n      })\n    }\n\n    function closeAndError(err) {\n      close(fd, function () {\n        cb(err)\n      })\n    }\n  })\n}\n\nfunction writeFileSync(filepath, data, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  if (typeof data === 'string') data = Buffer.from(data, opts.encoding)\n\n  const fd = openSync(filepath, opts.flag || 'w', opts.mode)\n\n  try {\n    let len = 0\n\n    while (true) {\n      len += writeSync(fd, len ? data.subarray(len) : data)\n      if (len === data.byteLength) break\n    }\n  } finally {\n    try {\n      closeSync(fd)\n    } catch {}\n  }\n}\n\nfunction appendFile(filepath, data, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  opts = { ...opts }\n\n  if (!opts.flags) opts.flag = 'a'\n\n  return writeFile(filepath, data, opts, cb)\n}\n\nfunction appendFileSync(filepath, data, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  opts = { ...opts }\n\n  if (!opts.flags) opts.flag = 'a'\n\n  return writeFileSync(filepath, data, opts)\n}\n\nfunction watch(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const watcher = new Watcher(toNamespacedPath(filepath), opts)\n  if (cb) watcher.on('change', cb)\n  return watcher\n}\n\nclass Stats {\n  constructor(\n    dev,\n    mode,\n    nlink,\n    uid,\n    gid,\n    rdev,\n    blksize,\n    ino,\n    size,\n    blocks,\n    atimeMs,\n    mtimeMs,\n    ctimeMs,\n    birthtimeMs\n  ) {\n    this.dev = dev\n    this.mode = mode\n    this.nlink = nlink\n    this.uid = uid\n    this.gid = gid\n    this.rdev = rdev\n    this.blksize = blksize\n    this.ino = ino\n    this.size = size\n    this.blocks = blocks\n    this.atimeMs = atimeMs\n    this.mtimeMs = mtimeMs\n    this.ctimeMs = ctimeMs\n    this.birthtimeMs = birthtimeMs\n    this.atime = new Date(atimeMs)\n    this.mtime = new Date(mtimeMs)\n    this.ctime = new Date(ctimeMs)\n    this.birthtime = new Date(birthtimeMs)\n  }\n\n  isDirectory() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFDIR\n  }\n\n  isFile() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFREG\n  }\n\n  isBlockDevice() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFBLK\n  }\n\n  isCharacterDevice() {\n    return (this.mode & constants.S_IFCHR) === constants.S_IFCHR\n  }\n\n  isFIFO() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFIFO\n  }\n\n  isSymbolicLink() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFLNK\n  }\n\n  isSocket() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFSOCK\n  }\n}\n\nclass Dir {\n  constructor(path, handle, opts = {}) {\n    const { encoding = 'utf8', bufferSize = 32 } = opts\n\n    this._handle = handle\n    this._dirents = Buffer.allocUnsafe(binding.sizeofFSDirent * bufferSize)\n    this._encoding = encoding\n    this._buffer = []\n    this._ended = false\n\n    this.path = path\n  }\n\n  read(cb) {\n    if (!cb) return promisify(this.read.bind(this))\n\n    if (this._buffer.length)\n      return queueMicrotask(() => cb(null, this._buffer.shift()))\n    if (this._ended) return queueMicrotask(() => cb(null, null))\n\n    const data = []\n    const req = getReq()\n\n    req.callback = (err, _) => {\n      if (err) return cb(err, null)\n      if (data.length === 0) this._ended = true\n      else {\n        for (const entry of data) {\n          let name = Buffer.from(entry.name)\n          if (this._encoding !== 'buffer') name = name.toString(this._encoding)\n          this._buffer.push(new Dirent(this.path, name, entry.type))\n        }\n      }\n\n      if (this._ended) return cb(null, null)\n      cb(null, this._buffer.shift())\n    }\n\n    binding.readdir(req.handle, this._handle, this._dirents, data)\n  }\n\n  readSync() {\n    if (this._buffer.length) return this._buffer.shift()\n    if (this._ended) return null\n\n    const data = []\n\n    binding.readdirSync(this._handle, this._dirents, data)\n\n    if (data.length === 0) this._ended = true\n    else {\n      for (const entry of data) {\n        let name = Buffer.from(entry.name)\n        if (this._encoding !== 'buffer') name = name.toString(this._encoding)\n        this._buffer.push(new Dirent(this.path, name, entry.type))\n      }\n    }\n\n    if (this._ended) return null\n    return this._buffer.shift()\n  }\n\n  close(cb) {\n    if (!cb) return promisify(this.close.bind(this))\n\n    const req = getReq()\n\n    req.callback = (err, _) => {\n      this._handle = null\n      cb(err)\n    }\n\n    binding.closedir(req.handle, this._handle)\n  }\n\n  closeSync() {\n    binding.closedirSync(this._handle)\n    this._handle = null\n  }\n\n  [Symbol.iterator]() {\n    return {\n      next: () => {\n        if (this._buffer.length) {\n          return { done: false, value: this._buffer.shift() }\n        }\n\n        if (this._ended) {\n          return { done: true }\n        }\n\n        const entry = this.readSync()\n\n        if (entry) {\n          return { done: false, value: entry }\n        }\n\n        this.closeSync()\n\n        return { done: true }\n      }\n    }\n  }\n\n  [Symbol.asyncIterator]() {\n    return {\n      next: () =>\n        new Promise((resolve, reject) => {\n          if (this._buffer.length) {\n            return resolve({ done: false, value: this._buffer.shift() })\n          }\n\n          if (this._ended) {\n            return resolve({ done: true })\n          }\n\n          this.read((err, entry) => {\n            if (err) return reject(err)\n\n            if (entry) {\n              return resolve({ done: false, value: entry })\n            }\n\n            this.close((err) => (err ? reject(err) : resolve({ done: true })))\n          })\n        })\n    }\n  }\n}\n\nclass Dirent {\n  constructor(path, name, type) {\n    this.path = path\n    this.name = name\n    this.type = type\n  }\n\n  isFile() {\n    return this.type === constants.UV_DIRENT_FILE\n  }\n\n  isDirectory() {\n    return this.type === constants.UV_DIRENT_DIR\n  }\n\n  isSymbolicLink() {\n    return this.type === constants.UV_DIRENT_LINK\n  }\n\n  isFIFO() {\n    return this.type === constants.UV_DIRENT_FIFO\n  }\n\n  isSocket() {\n    return this.type === constants.UV_DIRENT_SOCKET\n  }\n\n  isCharacterDevice() {\n    return this.type === constants.UV_DIRENT_CHAR\n  }\n\n  isBlockDevice() {\n    return this.type === constants.UV_DIRENT_BLOCK\n  }\n}\n\nclass FileWriteStream extends Writable {\n  constructor(path, opts = {}) {\n    super({ map })\n\n    this.path = path\n    this.fd = 0\n    this.flags = opts.flags || 'w'\n    this.mode = opts.mode || 0o666\n  }\n\n  _open(cb) {\n    open(this.path, this.flags, this.mode, (err, fd) => {\n      if (err) return cb(err)\n      this.fd = fd\n      cb(null)\n    })\n  }\n\n  _writev(batch, cb) {\n    writev(\n      this.fd,\n      batch.map(({ chunk }) => chunk),\n      cb\n    )\n  }\n\n  _destroy(err, cb) {\n    if (!this.fd) return cb(err)\n    close(this.fd, () => cb(err))\n  }\n}\n\nclass FileReadStream extends Readable {\n  constructor(path, opts = {}) {\n    super()\n\n    this.path = path\n    this.fd = 0\n\n    this._offset = opts.start || 0\n    this._missing = 0\n\n    if (opts.length) {\n      this._missing = opts.length\n    } else if (typeof opts.end === 'number') {\n      this._missing = opts.end - this._offset + 1\n    } else {\n      this._missing = -1\n    }\n  }\n\n  _open(cb) {\n    open(this.path, constants.O_RDONLY, (err, fd) => {\n      if (err) return cb(err)\n\n      const onerror = (err) => close(fd, () => cb(err))\n\n      fstat(fd, (err, st) => {\n        if (err) return onerror(err)\n        if (!st.isFile())\n          return onerror(new Error(this.path + ' is not a file'))\n\n        this.fd = fd\n        if (this._missing === -1) this._missing = st.size\n\n        if (st.size < this._offset) {\n          this._offset = st.size\n          this._missing = 0\n          return cb(null)\n        }\n        if (st.size < this._offset + this._missing) {\n          this._missing = st.size - this._offset\n          return cb(null)\n        }\n\n        cb(null)\n      })\n    })\n  }\n\n  _read(size) {\n    if (!this._missing) {\n      this.push(null)\n      return\n    }\n\n    const data = Buffer.allocUnsafe(Math.min(this._missing, size))\n\n    read(this.fd, data, 0, data.byteLength, this._offset, (err, read) => {\n      if (err) return this.destroy(err)\n\n      if (!read) {\n        this.push(null)\n        return\n      }\n\n      if (this._missing < read) read = this._missing\n      this.push(data.subarray(0, read))\n      this._missing -= read\n      this._offset += read\n      if (!this._missing) this.push(null)\n    })\n  }\n\n  _destroy(err, cb) {\n    if (!this.fd) return cb(err)\n    close(this.fd, () => cb(err))\n  }\n}\n\nclass Watcher extends EventEmitter {\n  constructor(path, opts) {\n    const { persistent = true, recursive = false, encoding = 'utf8' } = opts\n\n    super()\n\n    this._closed = false\n    this._encoding = encoding\n    this._handle = binding.watcherInit(\n      path,\n      recursive,\n      this,\n      this._onevent,\n      this._onclose\n    )\n\n    if (!persistent) this.unref()\n  }\n\n  _onevent(err, events, filename) {\n    if (err) {\n      this.close()\n      this.emit('error', err)\n    } else {\n      const path =\n        this._encoding === 'buffer'\n          ? Buffer.from(filename)\n          : Buffer.from(filename).toString(this._encoding)\n\n      if (events & binding.UV_RENAME) {\n        this.emit('change', 'rename', path)\n      }\n\n      if (events & binding.UV_CHANGE) {\n        this.emit('change', 'change', path)\n      }\n    }\n  }\n\n  _onclose() {\n    this._handle = null\n\n    this.emit('close')\n  }\n\n  close() {\n    if (this._closed) return\n    this._closed = true\n\n    binding.watcherClose(this._handle)\n  }\n\n  ref() {\n    if (this._handle) binding.watcherRef(this._handle)\n    return this\n  }\n\n  unref() {\n    if (this._handle) binding.watcherUnref(this._handle)\n    return this\n  }\n\n  [Symbol.asyncIterator]() {\n    const buffer = []\n    let done = false\n    let error = null\n    let next = null\n\n    this.on('change', (eventType, filename) => {\n      if (next) {\n        next.resolve({ done: false, value: { eventType, filename } })\n        next = null\n      } else {\n        buffer.push({ eventType, filename })\n      }\n    })\n      .on('error', (err) => {\n        done = true\n        error = err\n\n        if (next) {\n          next.reject(error)\n          next = null\n        }\n      })\n      .on('close', () => {\n        done = true\n\n        if (next) {\n          next.resolve({ done })\n          next = null\n        }\n      })\n\n    return {\n      next: () =>\n        new Promise((resolve, reject) => {\n          if (error) return reject(error)\n\n          if (buffer.length)\n            return resolve({ done: false, value: buffer.shift() })\n\n          if (done) return resolve({ done })\n\n          next = { resolve, reject }\n        })\n    }\n  }\n}\n\nexports.promises = {}\n\nfunction typeError(code, message) {\n  const error = new TypeError(message)\n  error.code = code\n  return error\n}\n\nfunction noop() {}\n\nexports.access = access\nexports.appendFile = appendFile\nexports.chmod = chmod\nexports.close = close\nexports.copyFile = copyFile\nexports.exists = exists\nexports.fchmod = fchmod\nexports.fstat = fstat\nexports.ftruncate = ftruncate\nexports.lstat = lstat\nexports.mkdir = mkdir\nexports.open = open\nexports.opendir = opendir\nexports.read = read\nexports.readFile = readFile\nexports.readdir = readdir\nexports.readlink = readlink\nexports.readv = readv\nexports.realpath = realpath\nexports.rename = rename\nexports.rm = rm\nexports.rmdir = rmdir\nexports.stat = stat\nexports.symlink = symlink\nexports.unlink = unlink\nexports.watch = watch\nexports.write = write\nexports.writeFile = writeFile\nexports.writev = writev\n\nexports.accessSync = accessSync\nexports.appendFileSync = appendFileSync\nexports.chmodSync = chmodSync\nexports.closeSync = closeSync\nexports.copyFileSync = copyFileSync\nexports.existsSync = existsSync\nexports.fchmodSync = fchmodSync\nexports.fstatSync = fstatSync\nexports.ftruncateSync = ftruncateSync\nexports.lstatSync = lstatSync\nexports.mkdirSync = mkdirSync\nexports.openSync = openSync\nexports.opendirSync = opendirSync\nexports.readFileSync = readFileSync\nexports.readSync = readSync\nexports.readdirSync = readdirSync\nexports.readlinkSync = readlinkSync\nexports.realpathSync = realpathSync\nexports.renameSync = renameSync\nexports.rmSync = rmSync\nexports.rmdirSync = rmdirSync\nexports.statSync = statSync\nexports.symlinkSync = symlinkSync\nexports.unlinkSync = unlinkSync\nexports.writeFileSync = writeFileSync\nexports.writeSync = writeSync\n\nexports.promises.access = promisify(access)\nexports.promises.appendFile = promisify(appendFile)\nexports.promises.chmod = promisify(chmod)\nexports.promises.copyFile = promisify(copyFile)\nexports.promises.lstat = promisify(lstat)\nexports.promises.mkdir = promisify(mkdir)\nexports.promises.opendir = promisify(opendir)\nexports.promises.readFile = promisify(readFile)\nexports.promises.readdir = promisify(readdir)\nexports.promises.readlink = promisify(readlink)\nexports.promises.realpath = promisify(realpath)\nexports.promises.rename = promisify(rename)\nexports.promises.rm = promisify(rm)\nexports.promises.rmdir = promisify(rmdir)\nexports.promises.stat = promisify(stat)\nexports.promises.symlink = promisify(symlink)\nexports.promises.unlink = promisify(unlink)\nexports.promises.writeFile = promisify(writeFile)\n\nexports.promises.watch = watch // Already async iterable\n\nexports.Stats = Stats\nexports.Dir = Dir\nexports.Dirent = Dirent\nexports.Watcher = Watcher\n\nexports.ReadStream = FileReadStream\nexports.createReadStream = function createReadStream(path, opts) {\n  return new FileReadStream(path, opts)\n}\n\nexports.WriteStream = FileWriteStream\nexports.createWriteStream = function createWriteStream(path, opts) {\n  return new FileWriteStream(path, opts)\n}\n\nfunction promisify(fn) {\n  return function (...args) {\n    return new Promise((resolve, reject) => {\n      fn(...args, function (err, res) {\n        if (err) return reject(err)\n        resolve(res)\n      })\n    })\n  }\n}\n\nfunction map(data) {\n  return typeof data === 'string' ? Buffer.from(data) : data\n}\n\nfunction toNamespacedPath(filepath) {\n  return path.toNamespacedPath(filepath)\n}\nconst binding = require('../binding')\n\nmodule.exports = {\n  O_RDWR: binding.O_RDWR,\n  O_RDONLY: binding.O_RDONLY,\n  O_WRONLY: binding.O_WRONLY,\n  O_CREAT: binding.O_CREAT,\n  O_TRUNC: binding.O_TRUNC,\n  O_APPEND: binding.O_APPEND,\n\n  F_OK: binding.F_OK || 0,\n  R_OK: binding.R_OK || 0,\n  W_OK: binding.W_OK || 0,\n  X_OK: binding.X_OK || 0,\n\n  S_IFMT: binding.S_IFMT,\n  S_IFREG: binding.S_IFREG,\n  S_IFDIR: binding.S_IFDIR,\n  S_IFCHR: binding.S_IFCHR,\n  S_IFLNK: binding.S_IFLNK,\n  S_IFBLK: binding.S_IFBLK || 0,\n  S_IFIFO: binding.S_IFIFO || 0,\n  S_IFSOCK: binding.S_IFSOCK || 0,\n\n  S_IRUSR: binding.S_IRUSR || 0,\n  S_IWUSR: binding.S_IWUSR || 0,\n  S_IXUSR: binding.S_IXUSR || 0,\n  S_IRGRP: binding.S_IRGRP || 0,\n  S_IWGRP: binding.S_IWGRP || 0,\n  S_IXGRP: binding.S_IXGRP || 0,\n  S_IROTH: binding.S_IROTH || 0,\n  S_IWOTH: binding.S_IWOTH || 0,\n  S_IXOTH: binding.S_IXOTH || 0,\n\n  UV_DIRENT_UNKNOWN: binding.UV_DIRENT_UNKNOWN,\n  UV_DIRENT_FILE: binding.UV_DIRENT_FILE,\n  UV_DIRENT_DIR: binding.UV_DIRENT_DIR,\n  UV_DIRENT_LINK: binding.UV_DIRENT_LINK,\n  UV_DIRENT_FIFO: binding.UV_DIRENT_FIFO,\n  UV_DIRENT_SOCKET: binding.UV_DIRENT_SOCKET,\n  UV_DIRENT_CHAR: binding.UV_DIRENT_CHAR,\n  UV_DIRENT_BLOCK: binding.UV_DIRENT_BLOCK,\n\n  COPYFILE_EXCL: binding.UV_FS_COPYFILE_EXCL,\n  COPYFILE_FICLONE: binding.UV_FS_COPYFILE_FICLONE,\n  COPYFILE_FICLONE_FORCE: binding.UV_FS_COPYFILE_FICLONE_FORCE,\n  UV_FS_SYMLINK_DIR: binding.UV_FS_SYMLINK_DIR,\n  UV_FS_SYMLINK_JUNCTION: binding.UV_FS_SYMLINK_JUNCTION\n}\n{\n  \"name\": \"bare-fs\",\n  \"version\": \"4.1.6\",\n  \"description\": \"Native file system for Javascript\",\n  \"exports\": {\n    \"./package\": \"./package.json\",\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./promises\": {\n      \"types\": \"./promises.d.ts\",\n      \"default\": \"./promises.js\"\n    },\n    \"./constants\": {\n      \"types\": \"./lib/constants.d.ts\",\n      \"default\": \"./lib/constants.js\"\n    }\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"promises.js\",\n    \"promises.d.ts\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"lib\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-fs.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-fs/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-fs#readme\",\n  \"engines\": {\n    \"bare\": \">=1.16.0\"\n  },\n  \"dependencies\": {\n    \"bare-events\": \"^2.5.4\",\n    \"bare-path\": \"^3.0.0\",\n    \"bare-stream\": \"^2.6.4\"\n  },\n  \"devDependencies\": {\n    \"bare-buffer\": \"^3.0.2\",\n    \"brittle\": \"^3.1.1\",\n    \"cmake-bare\": \"^1.1.7\",\n    \"prettier\": \"^3.4.1\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  },\n  \"peerDependencies\": {\n    \"bare-buffer\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"bare-buffer\": {\n      \"optional\": true\n    }\n  }\n}\nmodule.exports = require.addon()\nconst binding = require('./binding')\nconst errors = require('./lib/errors')\nconst constants = require('./lib/constants')\n\nexports.constants = constants\n\nexports.EOL = binding.platform === 'win32' ? '\\r\\n' : '\\n'\n\nexports.platform = function platform() {\n  return binding.platform\n}\n\nexports.arch = function arch() {\n  return binding.arch\n}\n\nexports.type = binding.type\nexports.version = binding.version\nexports.release = binding.release\nexports.machine = binding.machine\nexports.execPath = binding.execPath\nexports.pid = binding.pid\nexports.ppid = binding.ppid\nexports.cwd = binding.cwd\nexports.chdir = binding.chdir\nexports.tmpdir = binding.tmpdir\nexports.homedir = binding.homedir\nexports.hostname = binding.hostname\nexports.userInfo = binding.userInfo\n\nexports.kill = function kill(pid, signal = constants.signals.SIGTERM) {\n  if (typeof signal === 'string') {\n    if (signal in constants.signals === false) {\n      throw errors.UNKNOWN_SIGNAL('Unknown signal: ' + signal)\n    }\n\n    signal = constants.signals[signal]\n  }\n\n  binding.kill(pid, signal)\n}\n\nexports.endianness = function endianness() {\n  return binding.isLittleEndian ? 'LE' : 'BE'\n}\n\nexports.availableParallelism = binding.availableParallelism\n\nexports.cpuUsage = function cpuUsage(previous) {\n  const current = binding.cpuUsage()\n\n  if (previous) {\n    return {\n      user: current.user - previous.user,\n      system: current.system - previous.system\n    }\n  }\n\n  return current\n}\n\nexports.threadCpuUsage = function threadCpuUsage(previous) {\n  const current = binding.threadCpuUsage()\n\n  if (previous) {\n    return {\n      user: current.user - previous.user,\n      system: current.system - previous.system\n    }\n  }\n\n  return current\n}\n\nexports.resourceUsage = binding.resourceUsage\nexports.memoryUsage = binding.memoryUsage\nexports.freemem = binding.freemem\nexports.totalmem = binding.totalmem\nexports.uptime = binding.uptime\nexports.loadavg = binding.loadavg\nexports.cpus = binding.cpus\n\nexports.getProcessTitle = binding.getProcessTitle\n\nexports.setProcessTitle = function setProcessTitle(title) {\n  if (typeof title !== 'string') title = title.toString()\n\n  if (title.length >= 256) {\n    throw errors.TITLE_OVERFLOW('Process title is too long')\n  }\n\n  binding.setProcessTitle(title)\n}\n\nexports.getEnvKeys = binding.getEnvKeys\nexports.getEnv = binding.getEnv\nexports.hasEnv = binding.hasEnv\nexports.setEnv = binding.setEnv\nexports.unsetEnv = binding.unsetEnv\nconst binding = require('../binding')\n\nmodule.exports = {\n  signals: binding.signals,\n  errnos: binding.errnos\n}\nmodule.exports = class OSError extends Error {\n  constructor(msg, code, fn = OSError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'OSError'\n  }\n\n  static UNKNOWN_SIGNAL(msg) {\n    return new OSError(msg, 'UNKNOWN_SIGNAL', OSError.UNKNOWN_SIGNAL)\n  }\n\n  static TITLE_OVERFLOW(msg) {\n    return new OSError(msg, 'TITLE_OVERFLOW', OSError.TITLE_OVERFLOW)\n  }\n}\n{\n  \"name\": \"bare-os\",\n  \"version\": \"3.6.1\",\n  \"description\": \"Operating system utilities for Javascript\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./constants\": \"./lib/constants.js\",\n    \"./errors\": \"./lib/errors.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"lib\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-os.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-os/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-os#readme\",\n  \"engines\": {\n    \"bare\": \">=1.14.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.1\",\n    \"cmake-bare\": \"^1.1.6\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  }\n}\n/* global Bare */\n\n// This export SHOULD NOT be shortened in any way as having the full\n// `module.exports = require(...)` statement is crucial for synthesizing\n// ESM exports.\n\nif (Bare.platform === 'win32') {\n  module.exports = require('./lib/win32')\n} else {\n  module.exports = require('./lib/posix')\n}\nmodule.exports = {\n  CHAR_UPPERCASE_A: 0x41,\n  CHAR_LOWERCASE_A: 0x61,\n  CHAR_UPPERCASE_Z: 0x5a,\n  CHAR_LOWERCASE_Z: 0x7a,\n  CHAR_DOT: 0x2e,\n  CHAR_FORWARD_SLASH: 0x2f,\n  CHAR_BACKWARD_SLASH: 0x5c,\n  CHAR_COLON: 0x3a,\n  CHAR_QUESTION_MARK: 0x3f\n}\nconst os = require('bare-os')\n\nconst { normalizeString } = require('./shared')\nconst {\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH\n} = require('./constants')\n\nfunction isPosixPathSeparator (code) {\n  return code === CHAR_FORWARD_SLASH\n}\n\nexports.win32 = require('./win32')\nexports.posix = exports\n\nexports.sep = '/'\nexports.delimiter = ':'\n\nexports.resolve = function resolve (...args) {\n  let resolvedPath = ''\n  let resolvedAbsolute = false\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : os.cwd()\n\n    if (path.length === 0) {\n      continue\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`\n    resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH\n  }\n\n  resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator)\n\n  if (resolvedAbsolute) {\n    return `/${resolvedPath}`\n  }\n\n  return resolvedPath.length > 0 ? resolvedPath : '.'\n}\n\nexports.normalize = function normalize (path) {\n  if (path.length === 0) return '.'\n\n  const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH\n  const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH\n\n  path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator)\n\n  if (path.length === 0) {\n    if (isAbsolute) return '/'\n    return trailingSeparator ? './' : '.'\n  }\n\n  if (trailingSeparator) path += '/'\n\n  return isAbsolute ? `/${path}` : path\n}\n\nexports.isAbsolute = function isAbsolute (path) {\n  return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH\n}\n\nexports.join = function join (...args) {\n  if (args.length === 0) return '.'\n  let joined\n  for (let i = 0; i < args.length; ++i) {\n    const arg = args[i]\n    if (arg.length > 0) {\n      if (joined === undefined) joined = arg\n      else joined += `/${arg}`\n    }\n  }\n  if (joined === undefined) return '.'\n  return exports.normalize(joined)\n}\n\nexports.relative = function relative (from, to) {\n  if (from === to) return ''\n\n  from = exports.resolve(from)\n  to = exports.resolve(to)\n\n  if (from === to) return ''\n\n  const fromStart = 1\n  const fromEnd = from.length\n  const fromLen = fromEnd - fromStart\n  const toStart = 1\n  const toLen = to.length - toStart\n\n  const length = (fromLen < toLen ? fromLen : toLen)\n  let lastCommonSep = -1\n  let i = 0\n  for (; i < length; i++) {\n    const fromCode = from.charCodeAt(fromStart + i)\n    if (fromCode !== to.charCodeAt(toStart + i)) {\n      break\n    } else if (fromCode === CHAR_FORWARD_SLASH) {\n      lastCommonSep = i\n    }\n  }\n  if (i === length) {\n    if (toLen > length) {\n      if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n        return to.substring(toStart + i + 1)\n      }\n      if (i === 0) {\n        return to.substring(toStart + i)\n      }\n    } else if (fromLen > length) {\n      if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n        lastCommonSep = i\n      } else if (i === 0) {\n        lastCommonSep = 0\n      }\n    }\n  }\n\n  let out = ''\n  for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n    if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      out += out.length === 0 ? '..' : '/..'\n    }\n  }\n\n  return `${out}${to.substring(toStart + lastCommonSep)}`\n}\n\nexports.toNamespacedPath = function toNamespacedPath (path) {\n  return path\n}\n\nexports.dirname = function dirname (path) {\n  if (path.length === 0) return '.'\n  const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH\n  let end = -1\n  let matchedSlash = true\n  for (let i = path.length - 1; i >= 1; --i) {\n    if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        end = i\n        break\n      }\n    } else {\n      matchedSlash = false\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.'\n  if (hasRoot && end === 1) return '//'\n  return path.substring(0, end)\n}\n\nexports.basename = function basename (path, suffix) {\n  let start = 0\n  let end = -1\n  let matchedSlash = true\n\n  if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\n    if (suffix === path) { return '' }\n    let extIdx = suffix.length - 1\n    let firstNonSlashEnd = -1\n    for (let i = path.length - 1; i >= 0; --i) {\n      const code = path.charCodeAt(i)\n      if (code === CHAR_FORWARD_SLASH) {\n        if (!matchedSlash) {\n          start = i + 1\n          break\n        }\n      } else {\n        if (firstNonSlashEnd === -1) {\n          matchedSlash = false\n          firstNonSlashEnd = i + 1\n        }\n        if (extIdx >= 0) {\n          if (code === suffix.charCodeAt(extIdx)) {\n            if (--extIdx === -1) {\n              end = i\n            }\n          } else {\n            extIdx = -1\n            end = firstNonSlashEnd\n          }\n        }\n      }\n    }\n\n    if (start === end) end = firstNonSlashEnd\n    else if (end === -1) end = path.length\n    return path.substring(start, end)\n  }\n\n  for (let i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        start = i + 1\n        break\n      }\n    } else if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n  }\n\n  if (end === -1) return ''\n  return path.substring(start, end)\n}\n\nexports.extname = function extname (path) {\n  let startDot = -1\n  let startPart = 0\n  let end = -1\n  let matchedSlash = true\n  let preDotState = 0\n  for (let i = path.length - 1; i >= 0; --i) {\n    const code = path.charCodeAt(i)\n    if (code === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        startPart = i + 1\n        break\n      }\n      continue\n    }\n    if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n    if (code === CHAR_DOT) {\n      if (startDot === -1) startDot = i\n      else if (preDotState !== 1) preDotState = 1\n    } else if (startDot !== -1) {\n      preDotState = -1\n    }\n  }\n\n  if (startDot === -1 || end === -1 || preDotState === 0 || (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)) {\n    return ''\n  }\n  return path.substring(startDot, end)\n}\nconst {\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH\n} = require('./constants')\n\nexports.normalizeString = function normalizeString (path, allowAboveRoot, separator, isPathSeparator) {\n  let res = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let code = 0\n  for (let i = 0; i <= path.length; ++i) {\n    if (i < path.length) {\n      code = path.charCodeAt(i)\n    } else if (isPathSeparator(code)) {\n      break\n    } else {\n      code = CHAR_FORWARD_SLASH\n    }\n\n    if (isPathSeparator(code)) {\n      if (lastSlash === i - 1 || dots === 1) ;\n      else if (dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(separator)\n            if (lastSlashIndex === -1) {\n              res = ''\n              lastSegmentLength = 0\n            } else {\n              res = res.substring(0, lastSlashIndex)\n              lastSegmentLength =\n                res.length - 1 - res.lastIndexOf(separator)\n            }\n            lastSlash = i\n            dots = 0\n            continue\n          } else if (res.length !== 0) {\n            res = ''\n            lastSegmentLength = 0\n            lastSlash = i\n            dots = 0\n            continue\n          }\n        }\n        if (allowAboveRoot) {\n          res += res.length > 0 ? `${separator}..` : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (res.length > 0) {\n          res += `${separator}${path.substring(lastSlash + 1, i)}`\n        } else {\n          res = path.substring(lastSlash + 1, i)\n        }\n        lastSegmentLength = i - lastSlash - 1\n      }\n      lastSlash = i\n      dots = 0\n    } else if (code === CHAR_DOT && dots !== -1) {\n      ++dots\n    } else {\n      dots = -1\n    }\n  }\n  return res\n}\nconst os = require('bare-os')\n\nconst { normalizeString } = require('./shared')\nconst {\n  CHAR_UPPERCASE_A,\n  CHAR_LOWERCASE_A,\n  CHAR_UPPERCASE_Z,\n  CHAR_LOWERCASE_Z,\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH,\n  CHAR_BACKWARD_SLASH,\n  CHAR_COLON,\n  CHAR_QUESTION_MARK\n} = require('./constants')\n\nfunction isWindowsPathSeparator (code) {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH\n}\n\nfunction isWindowsDeviceRoot (code) {\n  return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\n         (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z)\n}\n\nexports.posix = require('./posix')\nexports.win32 = exports\n\nexports.sep = '\\\\'\nexports.delimiter = ';'\n\nexports.resolve = function resolve (...args) {\n  let resolvedDevice = ''\n  let resolvedTail = ''\n  let resolvedAbsolute = false\n\n  for (let i = args.length - 1; i >= -1; i--) {\n    let path\n    if (i >= 0) {\n      path = args[i]\n\n      if (path.length === 0) continue\n    } else if (resolvedDevice.length === 0) {\n      path = os.cwd()\n    } else {\n      path = os.getEnv(`=${resolvedDevice}`) || os.cwd()\n\n      if (path === undefined || (path.substring(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() && path.charCodeAt(2) === CHAR_BACKWARD_SLASH)) {\n        path = `${resolvedDevice}\\\\`\n      }\n    }\n\n    const len = path.length\n    let rootEnd = 0\n    let device = ''\n    let isAbsolute = false\n    const code = path.charCodeAt(0)\n\n    if (len === 1) {\n      if (isWindowsPathSeparator(code)) {\n        rootEnd = 1\n        isAbsolute = true\n      }\n    } else if (isWindowsPathSeparator(code)) {\n      isAbsolute = true\n\n      if (isWindowsPathSeparator(path.charCodeAt(1))) {\n        let j = 2\n        let last = j\n        while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n          j++\n        }\n        if (j < len && j !== last) {\n          const firstPart = path.substring(last, j)\n          last = j\n          while (j < len && isWindowsPathSeparator(path.charCodeAt(j))) {\n            j++\n          }\n          if (j < len && j !== last) {\n            last = j\n            while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n              j++\n            }\n            if (j === len || j !== last) {\n              device = `\\\\\\\\${firstPart}\\\\${path.substring(last, j)}`\n              rootEnd = j\n            }\n          }\n        }\n      } else {\n        rootEnd = 1\n      }\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      device = path.substring(0, 2)\n      rootEnd = 2\n      if (len > 2 && isWindowsPathSeparator(path.charCodeAt(2))) {\n        isAbsolute = true\n        rootEnd = 3\n      }\n    }\n\n    if (device.length > 0) {\n      if (resolvedDevice.length > 0) {\n        if (device.toLowerCase() !== resolvedDevice.toLowerCase()) { continue }\n      } else {\n        resolvedDevice = device\n      }\n    }\n\n    if (resolvedAbsolute) {\n      if (resolvedDevice.length > 0) { break }\n    } else {\n      resolvedTail = `${path.substring(rootEnd)}\\\\${resolvedTail}`\n      resolvedAbsolute = isAbsolute\n      if (isAbsolute && resolvedDevice.length > 0) {\n        break\n      }\n    }\n  }\n\n  resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\', isWindowsPathSeparator)\n\n  return resolvedAbsolute ? `${resolvedDevice}\\\\${resolvedTail}` : `${resolvedDevice}${resolvedTail}` || '.'\n}\n\nexports.normalize = function normalize (path) {\n  const len = path.length\n  if (len === 0) return '.'\n  let rootEnd = 0\n  let device\n  let isAbsolute = false\n  const code = path.charCodeAt(0)\n\n  if (len === 1) {\n    return code === CHAR_FORWARD_SLASH ? '\\\\' : path\n  }\n\n  if (isWindowsPathSeparator(code)) {\n    isAbsolute = true\n\n    if (isWindowsPathSeparator(path.charCodeAt(1))) {\n      let j = 2\n      let last = j\n      while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n        j++\n      }\n      if (j < len && j !== last) {\n        const firstPart = path.substring(last, j)\n        last = j\n        while (j < len && isWindowsPathSeparator(path.charCodeAt(j))) {\n          j++\n        }\n        if (j < len && j !== last) {\n          last = j\n          while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n            j++\n          }\n          if (j === len) {\n            return `\\\\\\\\${firstPart}\\\\${path.substring(last)}\\\\`\n          }\n          if (j !== last) {\n            device = `\\\\\\\\${firstPart}\\\\${path.substring(last, j)}`\n            rootEnd = j\n          }\n        }\n      }\n    } else {\n      rootEnd = 1\n    }\n  } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n    device = path.substring(0, 2)\n    rootEnd = 2\n    if (len > 2 && isWindowsPathSeparator(path.charCodeAt(2))) {\n      isAbsolute = true\n      rootEnd = 3\n    }\n  }\n\n  let tail = rootEnd < len ? normalizeString(path.substring(rootEnd), !isAbsolute, '\\\\', isWindowsPathSeparator) : ''\n  if (tail.length === 0 && !isAbsolute) {\n    tail = '.'\n  }\n  if (tail.length > 0 && isWindowsPathSeparator(path.charCodeAt(len - 1))) {\n    tail += '\\\\'\n  }\n  if (device === undefined) {\n    return isAbsolute ? `\\\\${tail}` : tail\n  }\n  return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`\n}\n\nexports.isAbsolute = function isAbsolute (path) {\n  const len = path.length\n  if (len === 0) return false\n\n  const code = path.charCodeAt(0)\n\n  return isWindowsPathSeparator(code) || (len > 2 && isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON && isWindowsPathSeparator(path.charCodeAt(2)))\n}\n\nexports.join = function join (...args) {\n  if (args.length === 0) return '.'\n\n  let joined\n  let firstPart\n  for (let i = 0; i < args.length; ++i) {\n    const arg = args[i]\n    if (arg.length > 0) {\n      if (joined === undefined) joined = firstPart = arg\n      else joined += `\\\\${arg}`\n    }\n  }\n\n  if (joined === undefined) return '.'\n\n  let needsReplace = true\n  let slashCount = 0\n  if (isWindowsPathSeparator(firstPart.charCodeAt(0))) {\n    ++slashCount\n    const firstLen = firstPart.length\n    if (firstLen > 1 && isWindowsPathSeparator(firstPart.charCodeAt(1))) {\n      ++slashCount\n      if (firstLen > 2) {\n        if (isWindowsPathSeparator(firstPart.charCodeAt(2))) {\n          ++slashCount\n        } else {\n          needsReplace = false\n        }\n      }\n    }\n  }\n  if (needsReplace) {\n    while (slashCount < joined.length && isWindowsPathSeparator(joined.charCodeAt(slashCount))) {\n      slashCount++\n    }\n\n    if (slashCount >= 2) {\n      joined = `\\\\${joined.substring(slashCount)}`\n    }\n  }\n\n  return exports.normalize(joined)\n}\n\nexports.relative = function relative (from, to) {\n  if (from === to) return ''\n\n  const fromOrig = exports.resolve(from)\n  const toOrig = exports.resolve(to)\n\n  if (fromOrig === toOrig) return ''\n\n  from = fromOrig.toLowerCase()\n  to = toOrig.toLowerCase()\n\n  if (from === to) return ''\n\n  let fromStart = 0\n  while (fromStart < from.length && from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\n    fromStart++\n  }\n  let fromEnd = from.length\n  while (fromEnd - 1 > fromStart && from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\n    fromEnd--\n  }\n  const fromLen = fromEnd - fromStart\n\n  let toStart = 0\n  while (toStart < to.length && to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n    toStart++\n  }\n  let toEnd = to.length\n  while (toEnd - 1 > toStart && to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\n    toEnd--\n  }\n  const toLen = toEnd - toStart\n\n  const length = fromLen < toLen ? fromLen : toLen\n  let lastCommonSep = -1\n  let i = 0\n  for (; i < length; i++) {\n    const fromCode = from.charCodeAt(fromStart + i)\n    if (fromCode !== to.charCodeAt(toStart + i)) {\n      break\n    } else if (fromCode === CHAR_BACKWARD_SLASH) {\n      lastCommonSep = i\n    }\n  }\n\n  if (i !== length) {\n    if (lastCommonSep === -1) return toOrig\n  } else {\n    if (toLen > length) {\n      if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n        return toOrig.substring(toStart + i + 1)\n      }\n      if (i === 2) {\n        return toOrig.substring(toStart + i)\n      }\n    }\n    if (fromLen > length) {\n      if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n        lastCommonSep = i\n      } else if (i === 2) {\n        lastCommonSep = 3\n      }\n    }\n    if (lastCommonSep === -1) lastCommonSep = 0\n  }\n\n  let out = ''\n  for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n    if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n      out += out.length === 0 ? '..' : '\\\\..'\n    }\n  }\n\n  toStart += lastCommonSep\n\n  if (out.length > 0) {\n    return `${out}${toOrig.substring(toStart, toEnd)}`\n  }\n  if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n    ++toStart\n  }\n  return toOrig.substring(toStart, toEnd)\n}\n\nexports.toNamespacedPath = function toNamespacedPath (path) {\n  if (path.length === 0) return path\n\n  const resolvedPath = exports.resolve(path)\n\n  if (resolvedPath.length <= 2) return path\n\n  if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n    if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n      const code = resolvedPath.charCodeAt(2)\n      if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n        return `\\\\\\\\?\\\\UNC\\\\${resolvedPath.substring(2)}`\n      }\n    }\n  } else if (\n    isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) &&\n      resolvedPath.charCodeAt(1) === CHAR_COLON &&\n      resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH\n  ) {\n    return `\\\\\\\\?\\\\${resolvedPath}`\n  }\n\n  return path\n}\n\nexports.dirname = function dirname (path) {\n  const len = path.length\n  if (len === 0) return '.'\n  let rootEnd = -1\n  let offset = 0\n  const code = path.charCodeAt(0)\n\n  if (len === 1) {\n    return isWindowsPathSeparator(code) ? path : '.'\n  }\n\n  if (isWindowsPathSeparator(code)) {\n    rootEnd = offset = 1\n\n    if (isWindowsPathSeparator(path.charCodeAt(1))) {\n      let j = 2\n      let last = j\n      while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n        j++\n      }\n      if (j < len && j !== last) {\n        last = j\n        while (j < len && isWindowsPathSeparator(path.charCodeAt(j))) {\n          j++\n        }\n        if (j < len && j !== last) {\n          last = j\n          while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n            j++\n          }\n          if (j === len) {\n            return path\n          }\n          if (j !== last) {\n            rootEnd = offset = j + 1\n          }\n        }\n      }\n    }\n  } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n    rootEnd = len > 2 && isWindowsPathSeparator(path.charCodeAt(2)) ? 3 : 2\n    offset = rootEnd\n  }\n\n  let end = -1\n  let matchedSlash = true\n  for (let i = len - 1; i >= offset; --i) {\n    if (isWindowsPathSeparator(path.charCodeAt(i))) {\n      if (!matchedSlash) {\n        end = i\n        break\n      }\n    } else {\n      matchedSlash = false\n    }\n  }\n\n  if (end === -1) {\n    if (rootEnd === -1) return '.'\n\n    end = rootEnd\n  }\n  return path.substring(0, end)\n}\n\nexports.basename = function basename (path, suffix) {\n  let start = 0\n  let end = -1\n  let matchedSlash = true\n\n  if (path.length >= 2 && isWindowsDeviceRoot(path.charCodeAt(0)) && path.charCodeAt(1) === CHAR_COLON) {\n    start = 2\n  }\n\n  if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\n    if (suffix === path) return ''\n    let extIdx = suffix.length - 1\n    let firstNonSlashEnd = -1\n    for (let i = path.length - 1; i >= start; --i) {\n      const code = path.charCodeAt(i)\n      if (isWindowsPathSeparator(code)) {\n        if (!matchedSlash) {\n          start = i + 1\n          break\n        }\n      } else {\n        if (firstNonSlashEnd === -1) {\n          matchedSlash = false\n          firstNonSlashEnd = i + 1\n        }\n        if (extIdx >= 0) {\n          if (code === suffix.charCodeAt(extIdx)) {\n            if (--extIdx === -1) {\n              end = i\n            }\n          } else {\n            extIdx = -1\n            end = firstNonSlashEnd\n          }\n        }\n      }\n    }\n\n    if (start === end) end = firstNonSlashEnd\n    else if (end === -1) end = path.length\n    return path.substring(start, end)\n  }\n  for (let i = path.length - 1; i >= start; --i) {\n    if (isWindowsPathSeparator(path.charCodeAt(i))) {\n      if (!matchedSlash) {\n        start = i + 1\n        break\n      }\n    } else if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n  }\n\n  if (end === -1) return ''\n  return path.substring(start, end)\n}\n\nexports.extname = function extname (path) {\n  let start = 0\n  let startDot = -1\n  let startPart = 0\n  let end = -1\n  let matchedSlash = true\n  let preDotState = 0\n\n  if (path.length >= 2 && path.charCodeAt(1) === CHAR_COLON && isWindowsDeviceRoot(path.charCodeAt(0))) {\n    start = startPart = 2\n  }\n\n  for (let i = path.length - 1; i >= start; --i) {\n    const code = path.charCodeAt(i)\n    if (isWindowsPathSeparator(code)) {\n      if (!matchedSlash) {\n        startPart = i + 1\n        break\n      }\n      continue\n    }\n    if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n    if (code === CHAR_DOT) {\n      if (startDot === -1) startDot = i\n      else if (preDotState !== 1) preDotState = 1\n    } else if (startDot !== -1) {\n      preDotState = -1\n    }\n  }\n\n  if (startDot === -1 || end === -1 || preDotState === 0 || (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)) {\n    return ''\n  }\n  return path.substring(startDot, end)\n}\n{\n  \"name\": \"bare-path\",\n  \"version\": \"3.0.0\",\n  \"description\": \"Path manipulation library for JavaScript\",\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./package\": \"./package.json\",\n    \"./posix\": \"./lib/posix.js\",\n    \"./win32\": \"./lib/win32.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"lib\",\n    \"NOTICE\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-path.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-path/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-path#readme\",\n  \"dependencies\": {\n    \"bare-os\": \"^3.0.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst safetyCatch = require('safety-catch')\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst m = require('./lib/messages')\nconst { type: t, stream: s } = require('./lib/constants')\nconst IncomingRequest = require('./lib/incoming-request')\nconst IncomingStream = require('./lib/incoming-stream')\nconst OutgoingRequest = require('./lib/outgoing-request')\nconst OutgoingStream = require('./lib/outgoing-stream')\nconst CommandRouter = require('./lib/command-router')\n\nmodule.exports = exports = class RPC {\n  constructor(stream, onrequest = noop) {\n    this._stream = stream\n\n    this._id = 0\n\n    this._outgoingRequests = new Map()\n    this._outgoingResponses = new Map()\n    this._incomingRequests = new Map()\n    this._incomingResponses = new Map()\n    this._pendingRequests = new Set()\n    this._pendingResponses = new Set()\n\n    this._buffer = []\n    this._buffered = 0\n    this._frame = -1\n\n    if (typeof onrequest === 'function') {\n      onrequest = onrequest.bind(this)\n    } else {\n      onrequest = onrequest._onrequest.bind(onrequest)\n    }\n\n    this._onrequest = onrequest\n    this._ondata = this._ondata.bind(this)\n\n    this._stream.on('data', this._ondata)\n  }\n\n  request(command) {\n    return new OutgoingRequest(this, ++this._id, command)\n  }\n\n  _sendMessage(message) {\n    this._stream.write(c.encode(m.message, message))\n  }\n\n  _sendRequest(request, data = null) {\n    this._outgoingRequests.set(request.id, request)\n\n    this._sendMessage({\n      type: t.REQUEST,\n      id: request.id,\n      command: request.command,\n      stream: 0,\n      data\n    })\n  }\n\n  _createRequestStream(request, isInitiator, opts) {\n    if (isInitiator) {\n      this._outgoingRequests.set(request.id, request)\n\n      request._requestStream = new OutgoingStream(\n        this,\n        request,\n        t.REQUEST,\n        opts\n      )\n    } else {\n      this._incomingRequests.set(request.id, request)\n\n      request._requestStream = new IncomingStream(\n        this,\n        request,\n        t.REQUEST,\n        opts\n      )\n\n      request._requestStream.on('close', () =>\n        this._incomingRequests.delete(request.id)\n      )\n    }\n  }\n\n  _sendResponse(request, data) {\n    this._sendMessage({\n      type: t.RESPONSE,\n      id: request.id,\n      stream: 0,\n      error: null,\n      data\n    })\n  }\n\n  _createResponseStream(request, isInitiator, opts) {\n    if (isInitiator) {\n      this._outgoingResponses.set(request.id, request)\n\n      request._responseStream = new OutgoingStream(\n        this,\n        request,\n        t.RESPONSE,\n        opts\n      )\n    } else {\n      this._incomingResponses.set(request.id, request)\n\n      request._responseStream = new IncomingStream(\n        this,\n        request,\n        t.RESPONSE,\n        opts\n      )\n\n      request._responseStream.on('close', () =>\n        this._incomingResponses.delete(request.id)\n      )\n    }\n  }\n\n  _sendError(request, err) {\n    this._sendMessage({\n      type: t.RESPONSE,\n      id: request.id,\n      stream: 0,\n      error: err,\n      data: null\n    })\n  }\n\n  _ondata(data) {\n    this._buffer.push(data)\n    this._buffered += data.byteLength\n\n    if (this._frame === -1) {\n      this._onbeforeframe()\n    } else {\n      this._onafterframe()\n    }\n  }\n\n  _onbeforeframe() {\n    if (this._buffered < 4) return\n\n    const buffer =\n      this._buffer.length === 1 ? this._buffer[0] : b4a.concat(this._buffer)\n\n    this._buffer = [buffer]\n    this._frame = 4 + c.uint32.decode(c.state(0, 4, buffer))\n\n    this._onafterframe()\n  }\n\n  _onafterframe() {\n    if (this._buffered < this._frame) return\n\n    const buffer =\n      this._buffer.length === 1 ? this._buffer[0] : b4a.concat(this._buffer)\n\n    const frame = this._frame\n\n    this._buffered -= frame\n    this._buffer = this._buffered > 0 ? [buffer.subarray(frame)] : []\n    this._frame = -1\n\n    this._onmessage(buffer.subarray(0, frame))\n    this._onbeforeframe()\n  }\n\n  async _onmessage(buffer) {\n    let message\n    try {\n      message = m.message.decode(c.state(0, buffer.length, buffer))\n    } catch (err) {\n      safetyCatch(err)\n\n      return this._stream.destroy(err)\n    }\n\n    switch (message.type) {\n      case t.REQUEST:\n        const request = new IncomingRequest(\n          this,\n          message.id,\n          message.command,\n          message.data\n        )\n\n        try {\n          await this._onrequest(request)\n        } catch (err) {\n          safetyCatch(err)\n\n          this._sendError(request, err)\n        }\n        break\n      case t.RESPONSE:\n        try {\n          this._onresponse(message)\n        } catch (err) {\n          safetyCatch(err)\n        }\n        break\n      case t.STREAM:\n        try {\n          this._onstream(message)\n        } catch (err) {\n          safetyCatch(err)\n        }\n    }\n  }\n\n  _onresponse(message) {\n    if (message.id === 0) return\n\n    const request = this._outgoingRequests.get(message.id)\n    if (request === undefined) return\n\n    if (message.error) {\n      request._reject(message.error)\n    } else if (message.stream === 0) {\n      request._resolve(message.data)\n    }\n  }\n\n  _onstream(message) {\n    if (message.id === 0) return\n\n    if (message.stream & s.OPEN) this._onstreamopen(message)\n    else if (message.stream & s.CLOSE) this._onstreamclose(message)\n    else if (message.stream & s.PAUSE) this._onstreampause(message)\n    else if (message.stream & s.RESUME) this._onstreamresume(message)\n    else if (message.stream & s.DATA) this._onstreamdata(message)\n    else if (message.stream & s.END) this._onstreamend(message)\n    else if (message.stream & s.DESTROY) this._onstreamdestroy(message)\n  }\n\n  _onstreamopen(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._outgoingRequests.get(message.id)\n      if (request === undefined) {\n        this._pendingRequests.add(message.id)\n        return\n      }\n\n      stream = request._requestStream\n\n      if (stream._pendingOpen === null) {\n        this._pendingRequests.add(message.id)\n        return\n      }\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._outgoingResponses.get(message.id)\n      if (request === undefined) {\n        this._pendingResponses.add(message.id)\n        return\n      }\n\n      stream = request._responseStream\n\n      if (stream._pendingOpen === null) {\n        this._pendingResponses.add(message.id)\n        return\n      }\n    } else {\n      return\n    }\n\n    stream._continueOpen()\n  }\n\n  _onstreamclose(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._incomingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._incomingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    if (message.error) stream.destroy(message.error)\n    else stream.push(null)\n  }\n\n  _onstreampause(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._outgoingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._outgoingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    stream.cork()\n  }\n\n  _onstreamresume(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._outgoingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._outgoingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    stream.uncork()\n  }\n\n  _onstreamdata(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._incomingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._incomingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    if (stream.push(message.data) === false) {\n      this._sendMessage({\n        type: t.STREAM,\n        id: stream._request.id,\n        stream: stream._mask | s.PAUSE,\n        error: null,\n        data: null\n      })\n    }\n  }\n\n  _onstreamend(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._incomingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._incomingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    stream.push(null)\n  }\n\n  _onstreamdestroy(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._outgoingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._outgoingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    stream.destroy(message.error)\n  }\n}\n\nexports.CommandRouter = CommandRouter\n\nfunction noop() {}\nconst c = require('compact-encoding')\n\nmodule.exports = class RPCCommandRouter {\n  constructor(opts = {}) {\n    const { valueEncoding = c.raw } = opts\n\n    this._responders = new Map()\n    this._defaultValueEncoding = valueEncoding\n  }\n\n  respond(command, opts = {}, onrequest) {\n    if (typeof opts === 'function') {\n      onrequest = opts\n      opts = {}\n    }\n\n    const {\n      valueEncoding = this._defaultValueEncoding,\n      requestEncoding = valueEncoding,\n      responseEncoding = valueEncoding\n    } = opts\n\n    this._responders.set(command, {\n      onrequest,\n      requestEncoding,\n      responseEncoding\n    })\n  }\n\n  async _onrequest(req) {\n    const responder = this._responders.get(req.command)\n\n    if (responder === undefined) return\n\n    const { onrequest, requestEncoding, responseEncoding } = responder\n\n    let data = req.data\n\n    if (requestEncoding) data = c.decode(requestEncoding, data)\n\n    data = await onrequest(req, data)\n\n    if (req.sent) return\n\n    if (responseEncoding) data = c.encode(responseEncoding, data)\n\n    req.reply(data)\n  }\n}\nmodule.exports = {\n  type: {\n    REQUEST: 1,\n    RESPONSE: 2,\n    STREAM: 3\n  },\n  stream: {\n    OPEN: 0x1,\n    CLOSE: 0x2,\n    PAUSE: 0x4,\n    RESUME: 0x8,\n    DATA: 0x10,\n    END: 0x20,\n    DESTROY: 0x40,\n    ERROR: 0x80,\n    REQUEST: 0x100,\n    RESPONSE: 0x200\n  }\n}\nmodule.exports = class RPCError extends Error {\n  constructor(msg, code, fn = RPCError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'RPCError'\n  }\n\n  static UNKNOWN_MESSAGE(msg) {\n    return new RPCError(msg, 'UNKNOWN_MESSAGE', RPCError.UNKNOWN_MESSAGE)\n  }\n\n  static ALREADY_SENT(msg) {\n    return new RPCError(msg, 'ALREADY_SENT', RPCError.ALREADY_SENT)\n  }\n\n  static ALREADY_RECEIVED(msg) {\n    return new RPCError(msg, 'ALREADY_RECEIVED', RPCError.ALREADY_RECEIVED)\n  }\n}\nconst b4a = require('b4a')\nconst errors = require('./errors')\n\nmodule.exports = class RPCIncomingRequest {\n  constructor(rpc, id, command, data) {\n    this.rpc = rpc\n    this.id = id\n    this.command = command\n    this.data = data\n    this.sent = false\n    this.received = false\n\n    this._requestStream = null\n    this._responseStream = null\n  }\n\n  reply(data, encoding) {\n    if (this.sent) {\n      throw errors.ALREADY_SENT('Response has already been sent')\n    }\n\n    this.sent = true\n\n    this.rpc._sendResponse(\n      this,\n      typeof data === 'string' ? b4a.from(data, encoding) : data\n    )\n  }\n\n  createResponseStream(opts = {}) {\n    if (this.sent) {\n      throw errors.ALREADY_SENT('Response has already been sent')\n    }\n\n    this.sent = true\n\n    this.rpc._createResponseStream(this, true, opts)\n\n    return this._responseStream\n  }\n\n  createRequestStream(opts = {}) {\n    if (this.received) {\n      throw errors.ALREADY_RECEIVED('Request has already been received')\n    }\n\n    this.received = true\n\n    this.rpc._createRequestStream(this, false, opts)\n\n    return this._requestStream\n  }\n}\nconst { Readable } = require('bare-stream')\nconst { type: t, stream: s } = require('./constants')\n\nmodule.exports = class RPCIncomingStream extends Readable {\n  constructor(rpc, request, type, opts) {\n    super({ ...opts, eagerOpen: true })\n\n    this._rpc = rpc\n    this._request = request\n    this._type = type\n    this._mask = type === t.REQUEST ? s.REQUEST : s.RESPONSE\n  }\n\n  _open(cb) {\n    this._rpc._sendMessage({\n      type: t.STREAM,\n      id: this._request.id,\n      stream: this._mask | s.OPEN,\n      error: null,\n      data: null\n    })\n\n    cb(null)\n  }\n\n  _read() {\n    this._rpc._sendMessage({\n      type: t.STREAM,\n      id: this._request.id,\n      stream: this._mask | s.RESUME,\n      error: null,\n      data: null\n    })\n  }\n\n  _destroy(err, cb) {\n    if (err) {\n      this._rpc._sendMessage({\n        type: t.STREAM,\n        id: this._request.id,\n        stream: this._mask | s.DESTROY | s.ERROR,\n        error: err,\n        data: null\n      })\n    } else {\n      this._rpc._sendMessage({\n        type: t.STREAM,\n        id: this._request.id,\n        stream: this._mask | s.DESTROY,\n        error: null,\n        data: null\n      })\n    }\n\n    cb(null)\n  }\n}\nconst c = require('compact-encoding')\nconst { type: t, stream: s } = require('./constants')\nconst errors = require('./errors')\n\nconst request = {\n  preencode(state, m) {\n    c.uint.preencode(state, m.command)\n    c.uint.preencode(state, m.stream)\n    if (m.stream === 0) c.buffer.preencode(state, m.data)\n  },\n  encode(state, m) {\n    c.uint.encode(state, m.command)\n    c.uint.encode(state, m.stream)\n    if (m.stream === 0) c.buffer.encode(state, m.data)\n  },\n  decode(state, id) {\n    const command = c.uint.decode(state)\n    const stream = c.uint.decode(state)\n    const data = stream === 0 ? c.buffer.decode(state) : null\n\n    return { type: t.REQUEST, id, command, stream, data }\n  }\n}\n\nconst error = {\n  preencode(state, m) {\n    c.utf8.preencode(state, m.message)\n    c.utf8.preencode(state, m.code || '')\n    c.int.preencode(state, m.errno || 0)\n  },\n  encode(state, m) {\n    c.utf8.encode(state, m.message)\n    c.utf8.encode(state, m.code || '')\n    c.int.encode(state, m.errno || 0)\n  },\n  decode(state) {\n    const err = new Error(`${c.utf8.decode(state)}`)\n    err.code = c.utf8.decode(state)\n    err.errno = c.int.decode(state)\n    return err\n  }\n}\n\nconst response = {\n  preencode(state, m) {\n    c.bool.preencode(state, !!m.error)\n    c.uint.preencode(state, m.stream)\n\n    if (m.error) error.preencode(state, m.error)\n    else if (m.stream === 0) c.buffer.preencode(state, m.data)\n  },\n  encode(state, m) {\n    c.bool.encode(state, !!m.error)\n    c.uint.encode(state, m.stream)\n\n    if (m.error) error.encode(state, m.error)\n    else if (m.stream === 0) c.buffer.encode(state, m.data)\n  },\n  decode(state) {\n    const err = c.bool.decode(state)\n    const stream = c.uint.decode(state)\n\n    if (err) {\n      return { stream, error: error.decode(state), data: null }\n    }\n\n    if (stream === 0) {\n      return { stream, error: null, data: c.buffer.decode(state) }\n    }\n\n    return { stream, error: null, data: null }\n  }\n}\n\nconst stream = {\n  preencode(state, m) {\n    c.uint.preencode(state, m.stream)\n\n    if (m.stream & s.ERROR) error.preencode(state, m.error)\n    else if (m.stream & s.DATA) c.buffer.preencode(state, m.data)\n  },\n  encode(state, m) {\n    c.uint.encode(state, m.stream)\n\n    if (m.stream & s.ERROR) error.encode(state, m.error)\n    else if (m.stream & s.DATA) c.buffer.encode(state, m.data)\n  },\n  decode(state) {\n    const stream = c.uint.decode(state)\n\n    if (stream & s.ERROR)\n      return { stream, error: error.decode(state), data: null }\n    if (stream & s.DATA)\n      return { stream, error: null, data: c.buffer.decode(state) }\n\n    return { stream, error: null, data: null }\n  }\n}\n\nexports.message = {\n  preencode(state, m) {\n    c.uint32.preencode(state, 0) // Frame\n    c.uint.preencode(state, m.type)\n    c.uint.preencode(state, m.id)\n\n    switch (m.type) {\n      case t.REQUEST:\n        request.preencode(state, m)\n        break\n      case t.RESPONSE:\n        response.preencode(state, m)\n        break\n      case t.STREAM:\n        stream.preencode(state, m)\n        break\n    }\n  },\n  encode(state, m) {\n    const frame = state.start\n\n    c.uint32.encode(state, 0) // Frame\n\n    const start = state.start\n\n    c.uint.encode(state, m.type)\n    c.uint.encode(state, m.id)\n\n    switch (m.type) {\n      case t.REQUEST:\n        request.encode(state, m)\n        break\n      case t.RESPONSE:\n        response.encode(state, m)\n        break\n      case t.STREAM:\n        stream.encode(state, m)\n        break\n    }\n\n    const end = state.start\n\n    state.start = frame\n\n    c.uint32.encode(state, end - start)\n\n    state.start = end\n  },\n  decode(state) {\n    const frame = c.uint32.decode(state)\n\n    if (state.end - state.start < frame) throw new RangeError('Out of bounds')\n\n    const type = c.uint.decode(state)\n    const id = c.uint.decode(state)\n\n    switch (type) {\n      case t.REQUEST:\n        return { type, id, ...request.decode(state, id) }\n      case t.RESPONSE:\n        return { type, id, ...response.decode(state, id) }\n      case t.STREAM:\n        return { type, id, ...stream.decode(state, id) }\n      default:\n        throw errors.UNKNOWN_MESSAGE(`Unknown message '${type}'`)\n    }\n  }\n}\nconst b4a = require('b4a')\nconst errors = require('./errors')\n\nmodule.exports = class RPCOutgoingRequest {\n  constructor(rpc, id, command) {\n    this.rpc = rpc\n    this.id = id\n    this.command = command\n    this.sent = false\n    this.received = false\n\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve\n      this._reject = reject\n    })\n\n    this._requestStream = null\n    this._responseStream = null\n  }\n\n  send(data, encoding) {\n    if (this.sent) {\n      throw errors.ALREADY_SENT('Request has already been sent')\n    }\n\n    this.sent = true\n\n    this.rpc._sendRequest(\n      this,\n      typeof data === 'string' ? b4a.from(data, encoding) : data\n    )\n  }\n\n  reply(encoding) {\n    if (this.received) {\n      throw errors.ALREADY_RECEIVED('Response is already being received')\n    }\n\n    this.received = true\n\n    return encoding && encoding !== 'buffer'\n      ? this._promise.then((data) => b4a.toString(data, encoding))\n      : this._promise\n  }\n\n  createRequestStream(opts = {}) {\n    if (this.sent) {\n      throw errors.ALREADY_SENT('Request has already been sent')\n    }\n\n    this.sent = true\n\n    this.rpc._createRequestStream(this, true, opts)\n\n    return this._requestStream\n  }\n\n  createResponseStream(opts = {}) {\n    if (this.received) {\n      throw errors.ALREADY_RECEIVED('Response has already been received')\n    }\n\n    this.received = true\n\n    this.rpc._createResponseStream(this, false, opts)\n\n    return this._responseStream\n  }\n}\nconst { Writable } = require('bare-stream')\nconst { type: t, stream: s } = require('./constants')\n\nmodule.exports = class RPCOutgoingStream extends Writable {\n  constructor(rpc, request, type, opts) {\n    super({ ...opts, eagerOpen: true })\n\n    this._rpc = rpc\n    this._request = request\n    this._type = type\n    this._mask = type === t.REQUEST ? s.REQUEST : s.RESPONSE\n\n    this._pendingOpen = null\n  }\n\n  _open(cb) {\n    let pending\n\n    switch (this._type) {\n      case t.REQUEST:\n        pending = this._rpc._pendingRequests\n\n        this._rpc._sendMessage({\n          type: t.REQUEST,\n          id: this._request.id,\n          command: this._request.command,\n          stream: s.OPEN,\n          data: null\n        })\n        break\n\n      case t.RESPONSE:\n        pending = this._rpc._pendingResponses\n\n        this._rpc._sendMessage({\n          type: t.RESPONSE,\n          id: this._request.id,\n          error: false,\n          stream: s.OPEN,\n          data: null\n        })\n        break\n    }\n\n    if (pending.has(this._request.id)) {\n      pending.delete(this._request.id)\n\n      cb(null)\n    } else {\n      this._pendingOpen = cb\n    }\n  }\n\n  _continueOpen() {\n    if (this._pendingOpen === null) return\n    const cb = this._pendingOpen\n    this._pendingOpen = null\n    cb()\n  }\n\n  _write(data, encoding, cb) {\n    this._rpc._sendMessage({\n      type: t.STREAM,\n      id: this._request.id,\n      stream: this._mask | s.DATA,\n      error: null,\n      data\n    })\n\n    cb(null)\n  }\n\n  _final(cb) {\n    this._rpc._sendMessage({\n      type: t.STREAM,\n      id: this._request.id,\n      stream: this._mask | s.END,\n      error: null,\n      data: null\n    })\n\n    cb(null)\n  }\n\n  _destroy(err, cb) {\n    if (err) {\n      this._rpc._sendMessage({\n        type: t.STREAM,\n        id: this._request.id,\n        stream: this._mask | s.CLOSE | s.ERROR,\n        error: err,\n        data: null\n      })\n    } else {\n      this._rpc._sendMessage({\n        type: t.STREAM,\n        id: this._request.id,\n        stream: this._mask | s.CLOSE,\n        error: null,\n        data: null\n      })\n    }\n\n    cb(null)\n  }\n}\n{\n  \"name\": \"bare-rpc\",\n  \"version\": \"0.2.6\",\n  \"description\": \"librpc ABI compatible RPC for Bare\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./errors\": {\n      \"types\": \"./lib/errors.d.ts\",\n      \"default\": \"./lib/errors.js\"\n    }\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-rpc.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-rpc/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-rpc#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.6\",\n    \"bare-stream\": \"^2.1.3\",\n    \"compact-encoding\": \"^2.15.0\",\n    \"safety-catch\": \"^1.0.2\"\n  },\n  \"devDependencies\": {\n    \"bare-buffer\": \"^3.0.1\",\n    \"bare-ipc\": \"^1.1.0\",\n    \"brittle\": \"^3.2.1\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  },\n  \"peerDependencies\": {\n    \"bare-buffer\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"bare-buffer\": {\n      \"optional\": true\n    }\n  }\n}\nconst stream = require('streamx')\n\nconst defaultEncoding = 'utf8'\n\nmodule.exports = exports = stream.Stream\n\nexports.pipeline = stream.pipeline\n\nexports.isStream = stream.isStream\nexports.isEnded = stream.isEnded\nexports.isFinished = stream.isFinished\nexports.isDisturbed = stream.isDisturbed\n\nexports.getStreamError = stream.getStreamError\n\nexports.Stream = exports\n\nexports.Readable = class Readable extends stream.Readable {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthReadable: null,\n      map: null,\n      mapReadable: null\n    })\n\n    if (this._construct) this._open = this._construct\n\n    if (this._read !== stream.Readable.prototype._read) {\n      this._read = read.bind(this, this._read)\n    }\n\n    if (this._destroy !== stream.Stream.prototype._destroy) {\n      this._destroy = destroy.bind(this, this._destroy)\n    }\n  }\n\n  push(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    return super.push(chunk)\n  }\n\n  unshift(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    super.unshift(chunk)\n  }\n}\n\nexports.Writable = class Writable extends stream.Writable {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthWritable,\n      map: null,\n      mapWritable: null\n    })\n\n    if (this._construct) this._open = this._construct\n\n    if (this._write !== stream.Writable.prototype._write) {\n      this._write = write.bind(this, this._write)\n    }\n\n    if (this._destroy !== stream.Stream.prototype._destroy) {\n      this._destroy = destroy.bind(this, this._destroy)\n    }\n  }\n\n  write(chunk, encoding, cb) {\n    if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result = super.write({ chunk, encoding })\n\n    if (cb) stream.Writable.drained(this).then(() => cb(null), cb)\n\n    return result\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') {\n      cb = chunk\n      chunk = null\n    } else if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result =\n      chunk !== undefined && chunk !== null\n        ? super.end({ chunk, encoding })\n        : super.end()\n\n    if (cb) this.once('end', () => cb(null))\n\n    return result\n  }\n}\n\nexports.Duplex = class Duplex extends stream.Duplex {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthReadable: null,\n      byteLengthWritable,\n      map: null,\n      mapReadable: null,\n      mapWritable: null\n    })\n\n    if (this._construct) this._open = this._construct\n\n    if (this._read !== stream.Readable.prototype._read) {\n      this._read = read.bind(this, this._read)\n    }\n\n    if (this._write !== stream.Duplex.prototype._write) {\n      this._write = write.bind(this, this._write)\n    }\n\n    if (this._destroy !== stream.Stream.prototype._destroy) {\n      this._destroy = destroy.bind(this, this._destroy)\n    }\n  }\n\n  push(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    return super.push(chunk)\n  }\n\n  unshift(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    super.unshift(chunk)\n  }\n\n  write(chunk, encoding, cb) {\n    if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result = super.write({ chunk, encoding })\n\n    if (cb) stream.Writable.drained(this).then(() => cb(null), cb)\n\n    return result\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') {\n      cb = chunk\n      chunk = null\n    } else if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result =\n      chunk !== undefined && chunk !== null\n        ? super.end({ chunk, encoding })\n        : super.end()\n\n    if (cb) this.once('end', () => cb(null))\n\n    return result\n  }\n}\n\nexports.Transform = class Transform extends stream.Transform {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthReadable: null,\n      byteLengthWritable,\n      map: null,\n      mapReadable: null,\n      mapWritable: null\n    })\n\n    if (this._transform !== stream.Transform.prototype._transform) {\n      this._transform = transform.bind(this, this._transform)\n    } else {\n      this._transform = passthrough\n    }\n  }\n\n  push(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    return super.push(chunk)\n  }\n\n  unshift(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    super.unshift(chunk)\n  }\n\n  write(chunk, encoding, cb) {\n    if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result = super.write({ chunk, encoding })\n\n    if (cb) stream.Writable.drained(this).then(() => cb(null), cb)\n\n    return result\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') {\n      cb = chunk\n      chunk = null\n    } else if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result =\n      chunk !== undefined && chunk !== null\n        ? super.end({ chunk, encoding })\n        : super.end()\n\n    if (cb) this.once('end', () => cb(null))\n\n    return result\n  }\n}\n\nexports.PassThrough = class PassThrough extends exports.Transform {}\n\nexports.finished = function finished(stream, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  if (!opts) opts = {}\n\n  const { cleanup = false } = opts\n\n  const done = () => {\n    cb(exports.getStreamError(stream, { all: true }))\n\n    if (cleanup) detach()\n  }\n\n  const detach = () => {\n    stream.off('close', done)\n    stream.off('error', noop)\n  }\n\n  if (stream.destroyed) {\n    done()\n  } else {\n    stream.on('close', done)\n    stream.on('error', noop)\n  }\n\n  return detach\n}\n\nfunction read(read, cb) {\n  read.call(this, 65536)\n\n  cb(null)\n}\n\nfunction write(write, data, cb) {\n  write.call(this, data.chunk, data.encoding, cb)\n}\n\nfunction transform(transform, data, cb) {\n  transform.call(this, data.chunk, data.encoding, cb)\n}\n\nfunction destroy(destroy, cb) {\n  destroy.call(this, exports.getStreamError(this), cb)\n}\n\nfunction passthrough(data, cb) {\n  cb(null, data.chunk)\n}\n\nfunction byteLengthWritable(data) {\n  return data.chunk.byteLength\n}\n\nfunction noop() {}\n{\n  \"name\": \"bare-stream\",\n  \"version\": \"2.6.5\",\n  \"description\": \"Streaming data for JavaScript\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./promises\": \"./promises.js\",\n    \"./web\": \"./web.js\",\n    \"./global\": \"./global.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"promises.js\",\n    \"web.js\",\n    \"global.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-stream.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-stream/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-stream#readme\",\n  \"dependencies\": {\n    \"streamx\": \"^2.21.0\"\n  },\n  \"devDependencies\": {\n    \"bare-buffer\": \"^3.0.0\",\n    \"bare-events\": \"^2.5.4\",\n    \"brittle\": \"^3.5.2\",\n    \"prettier\": \"^3.3.3\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  },\n  \"peerDependencies\": {\n    \"bare-buffer\": \"*\",\n    \"bare-events\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"bare-buffer\": {\n      \"optional\": true\n    },\n    \"bare-events\": {\n      \"optional\": true\n    }\n  }\n}\nmodule.exports = require.addon()\nconst path = require('bare-path')\nconst binding = require('./binding')\nconst errors = require('./lib/errors')\n\nconst kind = Symbol.for('bare.url.kind')\n\nconst isWindows = Bare.platform === 'win32'\n\nmodule.exports = exports = class URL {\n  static get [kind]() {\n    return 0 // Compatibility version\n  }\n\n  constructor(input, base, opts = {}) {\n    if (arguments.length === 0) throw errors.INVALID_URL()\n\n    input = `${input}`\n\n    if (base !== undefined) base = `${base}`\n\n    this._components = new Uint32Array(8)\n\n    this._parse(input, base, opts.throw !== false)\n  }\n\n  get [kind]() {\n    return URL[kind]\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-href\n\n  get href() {\n    return this._href\n  }\n\n  set href(value) {\n    this._update(value)\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-protocol\n\n  get protocol() {\n    return this._slice(0, this._components[0]) + ':'\n  }\n\n  set protocol(value) {\n    this._update(\n      this._replace(value.replace(/:+$/, ''), 0, this._components[0])\n    )\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-username\n\n  get username() {\n    return this._slice(this._components[0] + 3 /* :// */, this._components[1])\n  }\n\n  set username(value) {\n    if (cannotHaveCredentialsOrPort(this)) {\n      return\n    }\n\n    if (this.username === '') value += '@'\n\n    this._update(\n      this._replace(\n        value,\n        this._components[0] + 3 /* :// */,\n        this._components[1]\n      )\n    )\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-password\n\n  get password() {\n    return this._href.slice(\n      this._components[1] + 1 /* : */,\n      this._components[2] - 1 /* @ */\n    )\n  }\n\n  set password(value) {\n    if (cannotHaveCredentialsOrPort(this)) {\n      return\n    }\n\n    let start = this._components[1] + 1 /* : */\n    let end = this._components[2] - 1 /* @ */\n\n    if (this.password === '') {\n      value = ':' + value\n      start--\n    }\n\n    if (this.username === '') {\n      value += '@'\n      end++\n    }\n\n    this._update(this._replace(value, start, end))\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-host\n\n  get host() {\n    return this._slice(this._components[2], this._components[5])\n  }\n\n  set host(value) {\n    if (hasOpaquePath(this)) {\n      return\n    }\n\n    this._update(\n      this._replace(\n        value,\n        this._components[2],\n        this._components[value.includes(':') ? 5 : 3]\n      )\n    )\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-hostname\n\n  get hostname() {\n    return this._slice(this._components[2], this._components[3])\n  }\n\n  set hostname(value) {\n    if (hasOpaquePath(this)) {\n      return\n    }\n\n    this._update(this._replace(value, this._components[2], this._components[3]))\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-port\n\n  get port() {\n    return this._slice(this._components[3] + 1 /* : */, this._components[5])\n  }\n\n  set port(value) {\n    if (cannotHaveCredentialsOrPort(this)) {\n      return\n    }\n\n    let start = this._components[3] + 1 /* : */\n\n    if (this.port === '') {\n      value = ':' + value\n      start--\n    }\n\n    this._update(this._replace(value, start, this._components[5]))\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-pathname\n\n  get pathname() {\n    return this._slice(this._components[5], this._components[6] - 1 /* ? */)\n  }\n\n  set pathname(value) {\n    if (hasOpaquePath(this)) {\n      return\n    }\n\n    if (value[0] !== '/' && value[0] !== '\\\\') {\n      value = '/' + value\n    }\n\n    this._update(\n      this._replace(value, this._components[5], this._components[6] - 1 /* ? */)\n    )\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-search\n\n  get search() {\n    return this._slice(\n      this._components[6] - 1 /* ? */,\n      this._components[7] - 1 /* # */\n    )\n  }\n\n  set search(value) {\n    if (value && value[0] !== '?') value = '?' + value\n\n    this._update(\n      this._replace(\n        value,\n        this._components[6] - 1 /* ? */,\n        this._components[7] - 1 /* # */\n      )\n    )\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-hash\n\n  get hash() {\n    return this._slice(this._components[7] - 1 /* # */)\n  }\n\n  set hash(value) {\n    if (value && value[0] !== '#') value = '#' + value\n\n    this._update(this._replace(value, this._components[7] - 1 /* # */))\n  }\n\n  toString() {\n    return this._href\n  }\n\n  toJSON() {\n    return this._href\n  }\n\n  [Symbol.for('bare.inspect')]() {\n    return {\n      __proto__: { constructor: URL },\n\n      href: this.href,\n      protocol: this.protocol,\n      username: this.username,\n      password: this.password,\n      host: this.host,\n      hostname: this.hostname,\n      port: this.port,\n      pathname: this.pathname,\n      search: this.search,\n      hash: this.hash\n    }\n  }\n\n  _slice(start, end = this._href.length) {\n    return this._href.slice(start, end)\n  }\n\n  _replace(replacement, start, end = this._href.length) {\n    return this._slice(0, start) + replacement + this._slice(end)\n  }\n\n  _parse(href, base, shouldThrow) {\n    try {\n      this._href = binding.parse(\n        String(href),\n        base ? String(base) : null,\n        this._components,\n        shouldThrow\n      )\n    } catch (err) {\n      if (err instanceof TypeError) throw err\n\n      throw errors.INVALID_URL()\n    }\n  }\n\n  _update(href) {\n    try {\n      this._parse(href, null, true)\n    } catch (err) {\n      if (err instanceof TypeError) throw err\n    }\n  }\n}\n\n// https://url.spec.whatwg.org/#url-opaque-path\nfunction hasOpaquePath(url) {\n  return url.pathname[0] !== '/'\n}\n\n// https://url.spec.whatwg.org/#cannot-have-a-username-password-port\nfunction cannotHaveCredentialsOrPort(url) {\n  return url.hostname === '' || url.protocol === 'file:'\n}\n\nconst URL = exports\n\nexports.URL = URL // For Node.js compatibility\n\nexports.errors = errors\n\nexports.isURL = function isURL(value) {\n  if (value instanceof URL) return true\n\n  return (\n    typeof value === 'object' && value !== null && value[kind] === URL[kind]\n  )\n}\n\nexports.parse = function parse(input, base) {\n  const url = new URL(input, base, { throw: false })\n  return url.href ? url : null\n}\n\nexports.canParse = function canParse(input, base) {\n  return binding.canParse(String(input), base ? String(base) : null)\n}\n\nexports.fileURLToPath = function fileURLToPath(url) {\n  if (typeof url === 'string') {\n    url = new URL(url)\n  }\n\n  if (url.protocol !== 'file:') {\n    throw errors.INVALID_URL_SCHEME('The URL must use the file: protocol')\n  }\n\n  if (isWindows) {\n    if (/%2f|%5c/i.test(url.pathname)) {\n      throw errors.INVALID_FILE_URL_PATH(\n        'The file: URL path must not include encoded \\\\ or / characters'\n      )\n    }\n  } else {\n    if (url.hostname) {\n      throw errors.INVALID_FILE_URL_HOST(\n        \"The file: URL host must be 'localhost' or empty\"\n      )\n    }\n\n    if (/%2f/i.test(url.pathname)) {\n      throw errors.INVALID_FILE_URL_PATH(\n        'The file: URL path must not include encoded / characters'\n      )\n    }\n  }\n\n  const pathname = path.normalize(decodeURIComponent(url.pathname))\n\n  if (isWindows) {\n    if (url.hostname) return '\\\\\\\\' + url.hostname + pathname\n\n    const letter = pathname.charCodeAt(1) | 0x20\n\n    if (\n      letter < 0x61 /* a */ ||\n      letter > 0x7a /* z */ ||\n      pathname.charCodeAt(2) !== 0x3a /* : */\n    ) {\n      throw errors.INVALID_FILE_URL_PATH('The file: URL path must be absolute')\n    }\n\n    return pathname.slice(1)\n  }\n\n  return pathname\n}\n\nexports.pathToFileURL = function pathToFileURL(pathname) {\n  let resolved = path.resolve(pathname)\n\n  if (pathname[pathname.length - 1] === '/') {\n    resolved += '/'\n  } else if (isWindows && pathname[pathname.length - 1] === '\\\\') {\n    resolved += '\\\\'\n  }\n\n  resolved = resolved\n    .replaceAll('%', '%25') // Must be first\n    .replaceAll('#', '%23')\n    .replaceAll('?', '%3f')\n    .replaceAll('\\n', '%0a')\n    .replaceAll('\\r', '%0d')\n    .replaceAll('\\t', '%09')\n\n  if (!isWindows) {\n    resolved = resolved.replaceAll('\\\\', '%5c')\n  }\n\n  return new URL('file:' + resolved)\n}\nmodule.exports = class URLError extends Error {\n  constructor(msg, code, fn = URLError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'URLError'\n  }\n\n  static INVALID_URL(msg = 'Invalid URL') {\n    return new URLError(msg, 'INVALID_URL', URLError.INVALID_URL)\n  }\n\n  static INVALID_URL_SCHEME(msg = 'Invalid URL') {\n    return new URLError(msg, 'INVALID_URL_SCHEME', URLError.INVALID_URL_SCHEME)\n  }\n\n  static INVALID_FILE_URL_HOST(msg = 'Invalid file: URL host') {\n    return new URLError(\n      msg,\n      'INVALID_FILE_URL_HOST',\n      URLError.INVALID_FILE_URL_HOST\n    )\n  }\n\n  static INVALID_FILE_URL_PATH(msg = 'Invalid file: URL path') {\n    return new URLError(\n      msg,\n      'INVALID_FILE_URL_PATH',\n      URLError.INVALID_FILE_URL_PATH\n    )\n  }\n}\n{\n  \"name\": \"bare-url\",\n  \"version\": \"2.1.6\",\n  \"description\": \"WHATWG URL implementation for JavaScript\",\n  \"exports\": {\n    \"./package\": \"./package.json\",\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./global\": {\n      \"types\": \"./global.d.ts\",\n      \"default\": \"./global.js\"\n    }\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"global.js\",\n    \"global.d.ts\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"lib\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-url.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-url/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-url\",\n  \"dependencies\": {\n    \"bare-path\": \"^3.0.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"cmake-bare\": \"^1.1.6\",\n    \"cmake-fetch\": \"^1.0.0\",\n    \"prettier\": \"^3.3.3\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  }\n}\nconst LE = exports.LE = (new Uint8Array(new Uint16Array([0xff]).buffer))[0] === 0xff\n\nexports.BE = !LE\nconst b4a = require('b4a')\n\nconst { BE } = require('./endian')\n\nexports.state = function (start = 0, end = 0, buffer = null) {\n  return { start, end, buffer, cache: null }\n}\n\nconst raw = exports.raw = require('./raw')\n\nconst uint = exports.uint = {\n  preencode (state, n) {\n    state.end += n <= 0xfc ? 1 : n <= 0xffff ? 3 : n <= 0xffffffff ? 5 : 9\n  },\n  encode (state, n) {\n    if (n <= 0xfc) uint8.encode(state, n)\n    else if (n <= 0xffff) {\n      state.buffer[state.start++] = 0xfd\n      uint16.encode(state, n)\n    } else if (n <= 0xffffffff) {\n      state.buffer[state.start++] = 0xfe\n      uint32.encode(state, n)\n    } else {\n      state.buffer[state.start++] = 0xff\n      uint64.encode(state, n)\n    }\n  },\n  decode (state) {\n    const a = uint8.decode(state)\n    if (a <= 0xfc) return a\n    if (a === 0xfd) return uint16.decode(state)\n    if (a === 0xfe) return uint32.decode(state)\n    return uint64.decode(state)\n  }\n}\n\nconst uint8 = exports.uint8 = {\n  preencode (state, n) {\n    state.end += 1\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n  },\n  decode (state) {\n    if (state.start >= state.end) throw new Error('Out of bounds')\n    return state.buffer[state.start++]\n  }\n}\n\nconst uint16 = exports.uint16 = {\n  preencode (state, n) {\n    state.end += 2\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n    state.buffer[state.start++] = n >>> 8\n  },\n  decode (state) {\n    if (state.end - state.start < 2) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] +\n      state.buffer[state.start++] * 0x100\n    )\n  }\n}\n\nconst uint24 = exports.uint24 = {\n  preencode (state, n) {\n    state.end += 3\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n    state.buffer[state.start++] = n >>> 8\n    state.buffer[state.start++] = n >>> 16\n  },\n  decode (state) {\n    if (state.end - state.start < 3) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] +\n      state.buffer[state.start++] * 0x100 +\n      state.buffer[state.start++] * 0x10000\n    )\n  }\n}\n\nconst uint32 = exports.uint32 = {\n  preencode (state, n) {\n    state.end += 4\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n    state.buffer[state.start++] = n >>> 8\n    state.buffer[state.start++] = n >>> 16\n    state.buffer[state.start++] = n >>> 24\n  },\n  decode (state) {\n    if (state.end - state.start < 4) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] +\n      state.buffer[state.start++] * 0x100 +\n      state.buffer[state.start++] * 0x10000 +\n      state.buffer[state.start++] * 0x1000000\n    )\n  }\n}\n\nconst uint40 = exports.uint40 = {\n  preencode (state, n) {\n    state.end += 5\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x100)\n    uint8.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 5) throw new Error('Out of bounds')\n    return uint8.decode(state) + 0x100 * uint32.decode(state)\n  }\n}\n\nconst uint48 = exports.uint48 = {\n  preencode (state, n) {\n    state.end += 6\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x10000)\n    uint16.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 6) throw new Error('Out of bounds')\n    return uint16.decode(state) + 0x10000 * uint32.decode(state)\n  }\n}\n\nconst uint56 = exports.uint56 = {\n  preencode (state, n) {\n    state.end += 7\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x1000000)\n    uint24.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 7) throw new Error('Out of bounds')\n    return uint24.decode(state) + 0x1000000 * uint32.decode(state)\n  }\n}\n\nconst uint64 = exports.uint64 = {\n  preencode (state, n) {\n    state.end += 8\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x100000000)\n    uint32.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 8) throw new Error('Out of bounds')\n    return uint32.decode(state) + 0x100000000 * uint32.decode(state)\n  }\n}\n\nconst int = exports.int = zigZagInt(uint)\nexports.int8 = zigZagInt(uint8)\nexports.int16 = zigZagInt(uint16)\nexports.int24 = zigZagInt(uint24)\nexports.int32 = zigZagInt(uint32)\nexports.int40 = zigZagInt(uint40)\nexports.int48 = zigZagInt(uint48)\nexports.int56 = zigZagInt(uint56)\nexports.int64 = zigZagInt(uint64)\n\nconst biguint64 = exports.biguint64 = {\n  preencode (state, n) {\n    state.end += 8\n  },\n  encode (state, n) {\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    view.setBigUint64(0, n, true) // little endian\n    state.start += 8\n  },\n  decode (state) {\n    if (state.end - state.start < 8) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    const n = view.getBigUint64(0, true) // little endian\n    state.start += 8\n    return n\n  }\n}\n\nexports.bigint64 = zigZagBigInt(biguint64)\n\nconst biguint = exports.biguint = {\n  preencode (state, n) {\n    let len = 0\n    for (let m = n; m; m = m >> 64n) len++\n    uint.preencode(state, len)\n    state.end += 8 * len\n  },\n  encode (state, n) {\n    let len = 0\n    for (let m = n; m; m = m >> 64n) len++\n    uint.encode(state, len)\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8 * len)\n    for (let m = n, i = 0; m; m = m >> 64n, i += 8) {\n      view.setBigUint64(i, BigInt.asUintN(64, m), true) // little endian\n    }\n    state.start += 8 * len\n  },\n  decode (state) {\n    const len = uint.decode(state)\n    if (state.end - state.start < 8 * len) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8 * len)\n    let n = 0n\n    for (let i = len - 1; i >= 0; i--) n = (n << 64n) + view.getBigUint64(i * 8, true) // little endian\n    state.start += 8 * len\n    return n\n  }\n}\n\nexports.bigint = zigZagBigInt(biguint)\n\nexports.lexint = require('./lexint')\n\nexports.float32 = {\n  preencode (state, n) {\n    state.end += 4\n  },\n  encode (state, n) {\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 4)\n    view.setFloat32(0, n, true) // little endian\n    state.start += 4\n  },\n  decode (state) {\n    if (state.end - state.start < 4) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 4)\n    const float = view.getFloat32(0, true) // little endian\n    state.start += 4\n    return float\n  }\n}\n\nexports.float64 = {\n  preencode (state, n) {\n    state.end += 8\n  },\n  encode (state, n) {\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    view.setFloat64(0, n, true) // little endian\n    state.start += 8\n  },\n  decode (state) {\n    if (state.end - state.start < 8) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    const float = view.getFloat64(0, true) // little endian\n    state.start += 8\n    return float\n  }\n}\n\nconst buffer = exports.buffer = {\n  preencode (state, b) {\n    if (b) uint8array.preencode(state, b)\n    else state.end++\n  },\n  encode (state, b) {\n    if (b) uint8array.encode(state, b)\n    else state.buffer[state.start++] = 0\n  },\n  decode (state) {\n    const len = uint.decode(state)\n    if (len === 0) return null\n    if (state.end - state.start < len) throw new Error('Out of bounds')\n    return state.buffer.subarray(state.start, (state.start += len))\n  }\n}\n\nexports.binary = {\n  ...buffer,\n  preencode (state, b) {\n    if (typeof b === 'string') utf8.preencode(state, b)\n    else buffer.preencode(state, b)\n  },\n  encode (state, b) {\n    if (typeof b === 'string') utf8.encode(state, b)\n    else buffer.encode(state, b)\n  }\n}\n\nexports.arraybuffer = {\n  preencode (state, b) {\n    uint.preencode(state, b.byteLength)\n    state.end += b.byteLength\n  },\n  encode (state, b) {\n    uint.encode(state, b.byteLength)\n\n    const view = new Uint8Array(b)\n\n    state.buffer.set(view, state.start)\n    state.start += b.byteLength\n  },\n  decode (state) {\n    const len = uint.decode(state)\n\n    const b = new ArrayBuffer(len)\n    const view = new Uint8Array(b)\n\n    view.set(state.buffer.subarray(state.start, state.start += len))\n\n    return b\n  }\n}\n\nfunction typedarray (TypedArray, swap) {\n  const n = TypedArray.BYTES_PER_ELEMENT\n\n  return {\n    preencode (state, b) {\n      uint.preencode(state, b.length)\n      state.end += b.byteLength\n    },\n    encode (state, b) {\n      uint.encode(state, b.length)\n\n      const view = new Uint8Array(b.buffer, b.byteOffset, b.byteLength)\n\n      if (BE && swap) swap(view)\n\n      state.buffer.set(view, state.start)\n      state.start += b.byteLength\n    },\n    decode (state) {\n      const len = uint.decode(state)\n\n      let b = state.buffer.subarray(state.start, state.start += len * n)\n      if (b.byteLength !== len * n) throw new Error('Out of bounds')\n      if ((b.byteOffset % n) !== 0) b = new Uint8Array(b)\n\n      if (BE && swap) swap(b)\n\n      return new TypedArray(b.buffer, b.byteOffset, b.byteLength / n)\n    }\n  }\n}\n\nconst uint8array = exports.uint8array = typedarray(Uint8Array)\nexports.uint16array = typedarray(Uint16Array, b4a.swap16)\nexports.uint32array = typedarray(Uint32Array, b4a.swap32)\n\nexports.int8array = typedarray(Int8Array)\nexports.int16array = typedarray(Int16Array, b4a.swap16)\nexports.int32array = typedarray(Int32Array, b4a.swap32)\n\nexports.biguint64array = typedarray(BigUint64Array, b4a.swap64)\nexports.bigint64array = typedarray(BigInt64Array, b4a.swap64)\n\nexports.float32array = typedarray(Float32Array, b4a.swap32)\nexports.float64array = typedarray(Float64Array, b4a.swap64)\n\nfunction string (encoding) {\n  return {\n    preencode (state, s) {\n      const len = b4a.byteLength(s, encoding)\n      uint.preencode(state, len)\n      state.end += len\n    },\n    encode (state, s) {\n      const len = b4a.byteLength(s, encoding)\n      uint.encode(state, len)\n      b4a.write(state.buffer, s, state.start, encoding)\n      state.start += len\n    },\n    decode (state) {\n      const len = uint.decode(state)\n      if (state.end - state.start < len) throw new Error('Out of bounds')\n      return b4a.toString(state.buffer, encoding, state.start, (state.start += len))\n    },\n    fixed (n) {\n      return {\n        preencode (state) {\n          state.end += n\n        },\n        encode (state, s) {\n          b4a.write(state.buffer, s, state.start, n, encoding)\n          state.start += n\n        },\n        decode (state) {\n          if (state.end - state.start < n) throw new Error('Out of bounds')\n          return b4a.toString(state.buffer, encoding, state.start, (state.start += n))\n        }\n      }\n    }\n  }\n}\n\nconst utf8 = exports.string = exports.utf8 = string('utf-8')\nexports.ascii = string('ascii')\nexports.hex = string('hex')\nexports.base64 = string('base64')\nexports.ucs2 = exports.utf16le = string('utf16le')\n\nexports.bool = {\n  preencode (state, b) {\n    state.end++\n  },\n  encode (state, b) {\n    state.buffer[state.start++] = b ? 1 : 0\n  },\n  decode (state) {\n    if (state.start >= state.end) throw Error('Out of bounds')\n    return state.buffer[state.start++] === 1\n  }\n}\n\nconst fixed = exports.fixed = function fixed (n) {\n  return {\n    preencode (state, s) {\n      if (s.byteLength !== n) throw new Error('Incorrect buffer size')\n      state.end += n\n    },\n    encode (state, s) {\n      state.buffer.set(s, state.start)\n      state.start += n\n    },\n    decode (state) {\n      if (state.end - state.start < n) throw new Error('Out of bounds')\n      return state.buffer.subarray(state.start, (state.start += n))\n    }\n  }\n}\n\nexports.fixed32 = fixed(32)\nexports.fixed64 = fixed(64)\n\nexports.array = function array (enc) {\n  return {\n    preencode (state, list) {\n      uint.preencode(state, list.length)\n      for (let i = 0; i < list.length; i++) enc.preencode(state, list[i])\n    },\n    encode (state, list) {\n      uint.encode(state, list.length)\n      for (let i = 0; i < list.length; i++) enc.encode(state, list[i])\n    },\n    decode (state) {\n      const len = uint.decode(state)\n      if (len > 0x100000) throw new Error('Array is too big')\n      const arr = new Array(len)\n      for (let i = 0; i < len; i++) arr[i] = enc.decode(state)\n      return arr\n    }\n  }\n}\n\nexports.frame = function frame (enc) {\n  const dummy = exports.state()\n\n  return {\n    preencode (state, m) {\n      const end = state.end\n      enc.preencode(state, m)\n      uint.preencode(state, state.end - end)\n    },\n    encode (state, m) {\n      dummy.end = 0\n      enc.preencode(dummy, m)\n      uint.encode(state, dummy.end)\n      enc.encode(state, m)\n    },\n    decode (state) {\n      const end = state.end\n      const len = uint.decode(state)\n      state.end = state.start + len\n      const m = enc.decode(state)\n      state.start = state.end\n      state.end = end\n      return m\n    }\n  }\n}\n\nexports.date = {\n  preencode (state, d) {\n    int.preencode(state, d.getTime())\n  },\n  encode (state, d) {\n    int.encode(state, d.getTime())\n  },\n  decode (state, d) {\n    return new Date(int.decode(state))\n  }\n}\n\nexports.json = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v))\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v))\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\n\nexports.ndjson = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v) + '\\n')\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v) + '\\n')\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\n\n// simple helper for when you want to just express nothing\nexports.none = {\n  preencode (state, n) {\n    // do nothing\n  },\n  encode (state, n) {\n    // do nothing\n  },\n  decode (state) {\n    return null\n  }\n}\n\n// \"any\" encoders here for helping just structure any object without schematising it\n\nconst anyArray = {\n  preencode (state, arr) {\n    uint.preencode(state, arr.length)\n    for (let i = 0; i < arr.length; i++) {\n      any.preencode(state, arr[i])\n    }\n  },\n  encode (state, arr) {\n    uint.encode(state, arr.length)\n    for (let i = 0; i < arr.length; i++) {\n      any.encode(state, arr[i])\n    }\n  },\n  decode (state) {\n    const arr = []\n    let len = uint.decode(state)\n    while (len-- > 0) {\n      arr.push(any.decode(state))\n    }\n    return arr\n  }\n}\n\nconst anyObject = {\n  preencode (state, o) {\n    const keys = Object.keys(o)\n    uint.preencode(state, keys.length)\n    for (const key of keys) {\n      utf8.preencode(state, key)\n      any.preencode(state, o[key])\n    }\n  },\n  encode (state, o) {\n    const keys = Object.keys(o)\n    uint.encode(state, keys.length)\n    for (const key of keys) {\n      utf8.encode(state, key)\n      any.encode(state, o[key])\n    }\n  },\n  decode (state) {\n    let len = uint.decode(state)\n    const o = {}\n    while (len-- > 0) {\n      const key = utf8.decode(state)\n      o[key] = any.decode(state)\n    }\n    return o\n  }\n}\n\nconst anyTypes = [\n  exports.none,\n  exports.bool,\n  exports.string,\n  exports.buffer,\n  exports.uint,\n  exports.int,\n  exports.float64,\n  anyArray,\n  anyObject,\n  exports.date\n]\n\nconst any = exports.any = {\n  preencode (state, o) {\n    const t = getType(o)\n    uint.preencode(state, t)\n    anyTypes[t].preencode(state, o)\n  },\n  encode (state, o) {\n    const t = getType(o)\n    uint.encode(state, t)\n    anyTypes[t].encode(state, o)\n  },\n  decode (state) {\n    const t = uint.decode(state)\n    if (t >= anyTypes.length) throw new Error('Unknown type: ' + t)\n    return anyTypes[t].decode(state)\n  }\n}\n\nfunction getType (o) {\n  if (o === null || o === undefined) return 0\n  if (typeof o === 'boolean') return 1\n  if (typeof o === 'string') return 2\n  if (b4a.isBuffer(o)) return 3\n  if (typeof o === 'number') {\n    if (Number.isInteger(o)) return o >= 0 ? 4 : 5\n    return 6\n  }\n  if (Array.isArray(o)) return 7\n  if (o instanceof Date) return 9\n  if (typeof o === 'object') return 8\n\n  throw new Error('Unsupported type for ' + o)\n}\n\nexports.from = function from (enc) {\n  if (typeof enc === 'string') return fromNamed(enc)\n  if (enc.preencode) return enc\n  if (enc.encodingLength) return fromAbstractEncoder(enc)\n  return fromCodec(enc)\n}\n\nfunction fromNamed (enc) {\n  switch (enc) {\n    case 'ascii': return raw.ascii\n    case 'utf-8':\n    case 'utf8': return raw.utf8\n    case 'hex': return raw.hex\n    case 'base64': return raw.base64\n    case 'utf16-le':\n    case 'utf16le':\n    case 'ucs-2':\n    case 'ucs2': return raw.ucs2\n    case 'ndjson': return raw.ndjson\n    case 'json': return raw.json\n    case 'binary':\n    default: return raw.binary\n  }\n}\n\nfunction fromCodec (enc) {\n  let tmpM = null\n  let tmpBuf = null\n\n  return {\n    preencode (state, m) {\n      tmpM = m\n      tmpBuf = enc.encode(m)\n      state.end += tmpBuf.byteLength\n    },\n    encode (state, m) {\n      raw.encode(state, m === tmpM ? tmpBuf : enc.encode(m))\n      tmpM = tmpBuf = null\n    },\n    decode (state) {\n      return enc.decode(raw.decode(state))\n    }\n  }\n}\n\nfunction fromAbstractEncoder (enc) {\n  return {\n    preencode (state, m) {\n      state.end += enc.encodingLength(m)\n    },\n    encode (state, m) {\n      enc.encode(m, state.buffer, state.start)\n      state.start += enc.encode.bytes\n    },\n    decode (state) {\n      const m = enc.decode(state.buffer, state.start, state.end)\n      state.start += enc.decode.bytes\n      return m\n    }\n  }\n}\n\nexports.encode = function encode (enc, m) {\n  const state = exports.state()\n  enc.preencode(state, m)\n  state.buffer = b4a.allocUnsafe(state.end)\n  enc.encode(state, m)\n  return state.buffer\n}\n\nexports.decode = function decode (enc, buffer) {\n  return enc.decode(exports.state(0, buffer.byteLength, buffer))\n}\n\nfunction zigZagInt (enc) {\n  return {\n    preencode (state, n) {\n      enc.preencode(state, zigZagEncodeInt(n))\n    },\n    encode (state, n) {\n      enc.encode(state, zigZagEncodeInt(n))\n    },\n    decode (state) {\n      return zigZagDecodeInt(enc.decode(state))\n    }\n  }\n}\n\nfunction zigZagDecodeInt (n) {\n  return n === 0 ? n : (n & 1) === 0 ? n / 2 : -(n + 1) / 2\n}\n\nfunction zigZagEncodeInt (n) {\n  // 0, -1, 1, -2, 2, ...\n  return n < 0 ? (2 * -n) - 1 : n === 0 ? 0 : 2 * n\n}\n\nfunction zigZagBigInt (enc) {\n  return {\n    preencode (state, n) {\n      enc.preencode(state, zigZagEncodeBigInt(n))\n    },\n    encode (state, n) {\n      enc.encode(state, zigZagEncodeBigInt(n))\n    },\n    decode (state) {\n      return zigZagDecodeBigInt(enc.decode(state))\n    }\n  }\n}\n\nfunction zigZagDecodeBigInt (n) {\n  return n === 0n ? n : (n & 1n) === 0n ? n / 2n : -(n + 1n) / 2n\n}\n\nfunction zigZagEncodeBigInt (n) {\n  // 0, -1, 1, -2, 2, ...\n  return n < 0n ? (2n * -n) - 1n : n === 0n ? 0n : 2n * n\n}\n\nfunction validateUint (n) {\n  if ((n >= 0) === false /* Handles NaN as well */) throw new Error('uint must be positive')\n}\nmodule.exports = {\n  preencode,\n  encode,\n  decode\n}\n\nfunction preencode (state, num) {\n  if (num < 251) {\n    state.end++\n  } else if (num < 256) {\n    state.end += 2\n  } else if (num < 0x10000) {\n    state.end += 3\n  } else if (num < 0x1000000) {\n    state.end += 4\n  } else if (num < 0x100000000) {\n    state.end += 5\n  } else {\n    state.end++\n    const exp = Math.floor(Math.log(num) / Math.log(2)) - 32\n    preencode(state, exp)\n    state.end += 6\n  }\n}\n\nfunction encode (state, num) {\n  const max = 251\n  const x = num - max\n\n  if (num < max) {\n    state.buffer[state.start++] = num\n  } else if (num < 256) {\n    state.buffer[state.start++] = max\n    state.buffer[state.start++] = x\n  } else if (num < 0x10000) {\n    state.buffer[state.start++] = max + 1\n    state.buffer[state.start++] = x >> 8 & 0xff\n    state.buffer[state.start++] = x & 0xff\n  } else if (num < 0x1000000) {\n    state.buffer[state.start++] = max + 2\n    state.buffer[state.start++] = x >> 16\n    state.buffer[state.start++] = x >> 8 & 0xff\n    state.buffer[state.start++] = x & 0xff\n  } else if (num < 0x100000000) {\n    state.buffer[state.start++] = max + 3\n    state.buffer[state.start++] = x >> 24\n    state.buffer[state.start++] = x >> 16 & 0xff\n    state.buffer[state.start++] = x >> 8 & 0xff\n    state.buffer[state.start++] = x & 0xff\n  } else {\n    // need to use Math here as bitwise ops are 32 bit\n    const exp = Math.floor(Math.log(x) / Math.log(2)) - 32\n    state.buffer[state.start++] = 0xff\n\n    encode(state, exp)\n    const rem = x / Math.pow(2, exp - 11)\n\n    for (let i = 5; i >= 0; i--) {\n      state.buffer[state.start++] = rem / Math.pow(2, 8 * i) & 0xff\n    }\n  }\n}\n\nfunction decode (state) {\n  const max = 251\n\n  if (state.end - state.start < 1) throw new Error('Out of bounds')\n\n  const flag = state.buffer[state.start++]\n\n  if (flag < max) return flag\n\n  if (state.end - state.start < flag - max + 1) {\n    throw new Error('Out of bounds.')\n  }\n\n  if (flag < 252) {\n    return state.buffer[state.start++] +\n      max\n  }\n\n  if (flag < 253) {\n    return (state.buffer[state.start++] << 8) +\n      state.buffer[state.start++] +\n      max\n  }\n\n  if (flag < 254) {\n    return (state.buffer[state.start++] << 16) +\n      (state.buffer[state.start++] << 8) +\n      state.buffer[state.start++] +\n      max\n  }\n\n  // << 24 result may be interpreted as negative\n  if (flag < 255) {\n    return (state.buffer[state.start++] * 0x1000000) +\n      (state.buffer[state.start++] << 16) +\n      (state.buffer[state.start++] << 8) +\n      state.buffer[state.start++] +\n      max\n  }\n\n  const exp = decode(state)\n\n  if (state.end - state.start < 6) throw new Error('Out of bounds')\n\n  let rem = 0\n  for (let i = 5; i >= 0; i--) {\n    rem += state.buffer[state.start++] * Math.pow(2, 8 * i)\n  }\n\n  return (rem * Math.pow(2, exp - 11)) + max\n}\n{\n  \"name\": \"compact-encoding\",\n  \"version\": \"2.16.1\",\n  \"description\": \"A series of compact encoding schemes for building small and fast parsers and serializers\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"standard\": \"^16.0.3\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/compact-encoding/compact-encoding.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/compact-encoding/compact-encoding/issues\"\n  },\n  \"homepage\": \"https://github.com/compact-encoding/compact-encoding\"\n}\nconst b4a = require('b4a')\n\nconst { BE } = require('./endian')\n\nexports = module.exports = {\n  preencode (state, b) {\n    state.end += b.byteLength\n  },\n  encode (state, b) {\n    state.buffer.set(b, state.start)\n    state.start += b.byteLength\n  },\n  decode (state) {\n    const b = state.buffer.subarray(state.start, state.end)\n    state.start = state.end\n    return b\n  }\n}\n\nconst buffer = exports.buffer = {\n  preencode (state, b) {\n    if (b) uint8array.preencode(state, b)\n    else state.end++\n  },\n  encode (state, b) {\n    if (b) uint8array.encode(state, b)\n    else state.buffer[state.start++] = 0\n  },\n  decode (state) {\n    const b = state.buffer.subarray(state.start)\n    if (b.byteLength === 0) return null\n    state.start = state.end\n    return b\n  }\n}\n\nexports.binary = {\n  ...buffer,\n  preencode (state, b) {\n    if (typeof b === 'string') utf8.preencode(state, b)\n    else buffer.preencode(state, b)\n  },\n  encode (state, b) {\n    if (typeof b === 'string') utf8.encode(state, b)\n    else buffer.encode(state, b)\n  }\n}\n\nexports.arraybuffer = {\n  preencode (state, b) {\n    state.end += b.byteLength\n  },\n  encode (state, b) {\n    const view = new Uint8Array(b)\n\n    state.buffer.set(view, state.start)\n    state.start += b.byteLength\n  },\n  decode (state) {\n    const b = new ArrayBuffer(state.end - state.start)\n    const view = new Uint8Array(b)\n\n    view.set(state.buffer.subarray(state.start))\n\n    state.start = state.end\n\n    return b\n  }\n}\n\nfunction typedarray (TypedArray, swap) {\n  const n = TypedArray.BYTES_PER_ELEMENT\n\n  return {\n    preencode (state, b) {\n      state.end += b.byteLength\n    },\n    encode (state, b) {\n      const view = new Uint8Array(b.buffer, b.byteOffset, b.byteLength)\n\n      if (BE && swap) swap(view)\n\n      state.buffer.set(view, state.start)\n      state.start += b.byteLength\n    },\n    decode (state) {\n      let b = state.buffer.subarray(state.start)\n      if ((b.byteOffset % n) !== 0) b = new Uint8Array(b)\n\n      if (BE && swap) swap(b)\n\n      state.start = state.end\n\n      return new TypedArray(b.buffer, b.byteOffset, b.byteLength / n)\n    }\n  }\n}\n\nconst uint8array = exports.uint8array = typedarray(Uint8Array)\nexports.uint16array = typedarray(Uint16Array, b4a.swap16)\nexports.uint32array = typedarray(Uint32Array, b4a.swap32)\n\nexports.int8array = typedarray(Int8Array)\nexports.int16array = typedarray(Int16Array, b4a.swap16)\nexports.int32array = typedarray(Int32Array, b4a.swap32)\n\nexports.biguint64array = typedarray(BigUint64Array, b4a.swap64)\nexports.bigint64array = typedarray(BigInt64Array, b4a.swap64)\n\nexports.float32array = typedarray(Float32Array, b4a.swap32)\nexports.float64array = typedarray(Float64Array, b4a.swap64)\n\nfunction string (encoding) {\n  return {\n    preencode (state, s) {\n      state.end += b4a.byteLength(s, encoding)\n    },\n    encode (state, s) {\n      state.start += b4a.write(state.buffer, s, state.start, encoding)\n    },\n    decode (state) {\n      const s = b4a.toString(state.buffer, encoding, state.start)\n      state.start = state.end\n      return s\n    }\n  }\n}\n\nconst utf8 = exports.string = exports.utf8 = string('utf-8')\nexports.ascii = string('ascii')\nexports.hex = string('hex')\nexports.base64 = string('base64')\nexports.ucs2 = exports.utf16le = string('utf16le')\n\nexports.array = function array (enc) {\n  return {\n    preencode (state, list) {\n      for (const value of list) enc.preencode(state, value)\n    },\n    encode (state, list) {\n      for (const value of list) enc.encode(state, value)\n    },\n    decode (state) {\n      const arr = []\n      while (state.start < state.end) arr.push(enc.decode(state))\n      return arr\n    }\n  }\n}\n\nexports.json = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v))\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v))\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\n\nexports.ndjson = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v) + '\\n')\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v) + '\\n')\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\nmodule.exports = class FixedFIFO {\n  constructor (hwm) {\n    if (!(hwm > 0) || ((hwm - 1) & hwm) !== 0) throw new Error('Max size for a FixedFIFO should be a power of two')\n    this.buffer = new Array(hwm)\n    this.mask = hwm - 1\n    this.top = 0\n    this.btm = 0\n    this.next = null\n  }\n\n  clear () {\n    this.top = this.btm = 0\n    this.next = null\n    this.buffer.fill(undefined)\n  }\n\n  push (data) {\n    if (this.buffer[this.top] !== undefined) return false\n    this.buffer[this.top] = data\n    this.top = (this.top + 1) & this.mask\n    return true\n  }\n\n  shift () {\n    const last = this.buffer[this.btm]\n    if (last === undefined) return undefined\n    this.buffer[this.btm] = undefined\n    this.btm = (this.btm + 1) & this.mask\n    return last\n  }\n\n  peek () {\n    return this.buffer[this.btm]\n  }\n\n  isEmpty () {\n    return this.buffer[this.btm] === undefined\n  }\n}\nconst FixedFIFO = require('./fixed-size')\n\nmodule.exports = class FastFIFO {\n  constructor (hwm) {\n    this.hwm = hwm || 16\n    this.head = new FixedFIFO(this.hwm)\n    this.tail = this.head\n    this.length = 0\n  }\n\n  clear () {\n    this.head = this.tail\n    this.head.clear()\n    this.length = 0\n  }\n\n  push (val) {\n    this.length++\n    if (!this.head.push(val)) {\n      const prev = this.head\n      this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length)\n      this.head.push(val)\n    }\n  }\n\n  shift () {\n    if (this.length !== 0) this.length--\n    const val = this.tail.shift()\n    if (val === undefined && this.tail.next) {\n      const next = this.tail.next\n      this.tail.next = null\n      this.tail = next\n      return this.tail.shift()\n    }\n\n    return val\n  }\n\n  peek () {\n    const val = this.tail.peek()\n    if (val === undefined && this.tail.next) return this.tail.next.peek()\n    return val\n  }\n\n  isEmpty () {\n    return this.length === 0\n  }\n}\n{\n  \"name\": \"fast-fifo\",\n  \"version\": \"1.3.2\",\n  \"description\": \"A fast fifo implementation similar to the one powering nextTick in Node.js core\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"./index.js\",\n    \"./fixed-size.js\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^17.1.0\",\n    \"brittle\": \"^3.3.2\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/fast-fifo.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/fast-fifo/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/fast-fifo\"\n}\nmodule.exports = safetyCatch\n\nfunction isActuallyUncaught (err) {\n  if (!err) return false\n  return err instanceof TypeError ||\n    err instanceof SyntaxError ||\n    err instanceof ReferenceError ||\n    err instanceof EvalError ||\n    err instanceof RangeError ||\n    err instanceof URIError ||\n    err.code === 'ERR_ASSERTION'\n}\n\nfunction throwErrorNT (err) {\n  queueMicrotask(() => { throw err })\n}\n\nfunction safetyCatch (err) {\n  if (isActuallyUncaught(err)) {\n    throwErrorNT(err)\n    throw err\n  }\n}\n{\n  \"name\": \"safety-catch\",\n  \"version\": \"1.0.2\",\n  \"description\": \"Small module that makes sure your catch, caught an actual error and not a programming mistake or assertion\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/safety-catch.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/safety-catch/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/safety-catch\"\n}\nconst { EventEmitter } = require('events')\nconst STREAM_DESTROYED = new Error('Stream was destroyed')\nconst PREMATURE_CLOSE = new Error('Premature close')\n\nconst FIFO = require('fast-fifo')\nconst TextDecoder = require('text-decoder')\n\n// if we do a future major, expect queue microtask to be there always, for now a bit defensive\nconst qmt = typeof queueMicrotask === 'undefined' ? fn => global.process.nextTick(fn) : queueMicrotask\n\n/* eslint-disable no-multi-spaces */\n\n// 29 bits used total (4 from shared, 14 from read, and 11 from write)\nconst MAX = ((1 << 29) - 1)\n\n// Shared state\nconst OPENING       = 0b0001\nconst PREDESTROYING = 0b0010\nconst DESTROYING    = 0b0100\nconst DESTROYED     = 0b1000\n\nconst NOT_OPENING = MAX ^ OPENING\nconst NOT_PREDESTROYING = MAX ^ PREDESTROYING\n\n// Read state (4 bit offset from shared state)\nconst READ_ACTIVE           = 0b00000000000001 << 4\nconst READ_UPDATING         = 0b00000000000010 << 4\nconst READ_PRIMARY          = 0b00000000000100 << 4\nconst READ_QUEUED           = 0b00000000001000 << 4\nconst READ_RESUMED          = 0b00000000010000 << 4\nconst READ_PIPE_DRAINED     = 0b00000000100000 << 4\nconst READ_ENDING           = 0b00000001000000 << 4\nconst READ_EMIT_DATA        = 0b00000010000000 << 4\nconst READ_EMIT_READABLE    = 0b00000100000000 << 4\nconst READ_EMITTED_READABLE = 0b00001000000000 << 4\nconst READ_DONE             = 0b00010000000000 << 4\nconst READ_NEXT_TICK        = 0b00100000000000 << 4\nconst READ_NEEDS_PUSH       = 0b01000000000000 << 4\nconst READ_READ_AHEAD       = 0b10000000000000 << 4\n\n// Combined read state\nconst READ_FLOWING = READ_RESUMED | READ_PIPE_DRAINED\nconst READ_ACTIVE_AND_NEEDS_PUSH = READ_ACTIVE | READ_NEEDS_PUSH\nconst READ_PRIMARY_AND_ACTIVE = READ_PRIMARY | READ_ACTIVE\nconst READ_EMIT_READABLE_AND_QUEUED = READ_EMIT_READABLE | READ_QUEUED\nconst READ_RESUMED_READ_AHEAD = READ_RESUMED | READ_READ_AHEAD\n\nconst READ_NOT_ACTIVE             = MAX ^ READ_ACTIVE\nconst READ_NON_PRIMARY            = MAX ^ READ_PRIMARY\nconst READ_NON_PRIMARY_AND_PUSHED = MAX ^ (READ_PRIMARY | READ_NEEDS_PUSH)\nconst READ_PUSHED                 = MAX ^ READ_NEEDS_PUSH\nconst READ_PAUSED                 = MAX ^ READ_RESUMED\nconst READ_NOT_QUEUED             = MAX ^ (READ_QUEUED | READ_EMITTED_READABLE)\nconst READ_NOT_ENDING             = MAX ^ READ_ENDING\nconst READ_PIPE_NOT_DRAINED       = MAX ^ READ_FLOWING\nconst READ_NOT_NEXT_TICK          = MAX ^ READ_NEXT_TICK\nconst READ_NOT_UPDATING           = MAX ^ READ_UPDATING\nconst READ_NO_READ_AHEAD          = MAX ^ READ_READ_AHEAD\nconst READ_PAUSED_NO_READ_AHEAD   = MAX ^ READ_RESUMED_READ_AHEAD\n\n// Write state (18 bit offset, 4 bit offset from shared state and 14 from read state)\nconst WRITE_ACTIVE     = 0b00000000001 << 18\nconst WRITE_UPDATING   = 0b00000000010 << 18\nconst WRITE_PRIMARY    = 0b00000000100 << 18\nconst WRITE_QUEUED     = 0b00000001000 << 18\nconst WRITE_UNDRAINED  = 0b00000010000 << 18\nconst WRITE_DONE       = 0b00000100000 << 18\nconst WRITE_EMIT_DRAIN = 0b00001000000 << 18\nconst WRITE_NEXT_TICK  = 0b00010000000 << 18\nconst WRITE_WRITING    = 0b00100000000 << 18\nconst WRITE_FINISHING  = 0b01000000000 << 18\nconst WRITE_CORKED     = 0b10000000000 << 18\n\nconst WRITE_NOT_ACTIVE    = MAX ^ (WRITE_ACTIVE | WRITE_WRITING)\nconst WRITE_NON_PRIMARY   = MAX ^ WRITE_PRIMARY\nconst WRITE_NOT_FINISHING = MAX ^ (WRITE_ACTIVE | WRITE_FINISHING)\nconst WRITE_DRAINED       = MAX ^ WRITE_UNDRAINED\nconst WRITE_NOT_QUEUED    = MAX ^ WRITE_QUEUED\nconst WRITE_NOT_NEXT_TICK = MAX ^ WRITE_NEXT_TICK\nconst WRITE_NOT_UPDATING  = MAX ^ WRITE_UPDATING\nconst WRITE_NOT_CORKED    = MAX ^ WRITE_CORKED\n\n// Combined shared state\nconst ACTIVE = READ_ACTIVE | WRITE_ACTIVE\nconst NOT_ACTIVE = MAX ^ ACTIVE\nconst DONE = READ_DONE | WRITE_DONE\nconst DESTROY_STATUS = DESTROYING | DESTROYED | PREDESTROYING\nconst OPEN_STATUS = DESTROY_STATUS | OPENING\nconst AUTO_DESTROY = DESTROY_STATUS | DONE\nconst NON_PRIMARY = WRITE_NON_PRIMARY & READ_NON_PRIMARY\nconst ACTIVE_OR_TICKING = WRITE_NEXT_TICK | READ_NEXT_TICK\nconst TICKING = ACTIVE_OR_TICKING & NOT_ACTIVE\nconst IS_OPENING = OPEN_STATUS | TICKING\n\n// Combined shared state and read state\nconst READ_PRIMARY_STATUS = OPEN_STATUS | READ_ENDING | READ_DONE\nconst READ_STATUS = OPEN_STATUS | READ_DONE | READ_QUEUED\nconst READ_ENDING_STATUS = OPEN_STATUS | READ_ENDING | READ_QUEUED\nconst READ_READABLE_STATUS = OPEN_STATUS | READ_EMIT_READABLE | READ_QUEUED | READ_EMITTED_READABLE\nconst SHOULD_NOT_READ = OPEN_STATUS | READ_ACTIVE | READ_ENDING | READ_DONE | READ_NEEDS_PUSH | READ_READ_AHEAD\nconst READ_BACKPRESSURE_STATUS = DESTROY_STATUS | READ_ENDING | READ_DONE\nconst READ_UPDATE_SYNC_STATUS = READ_UPDATING | OPEN_STATUS | READ_NEXT_TICK | READ_PRIMARY\nconst READ_NEXT_TICK_OR_OPENING = READ_NEXT_TICK | OPENING\n\n// Combined write state\nconst WRITE_PRIMARY_STATUS = OPEN_STATUS | WRITE_FINISHING | WRITE_DONE\nconst WRITE_QUEUED_AND_UNDRAINED = WRITE_QUEUED | WRITE_UNDRAINED\nconst WRITE_QUEUED_AND_ACTIVE = WRITE_QUEUED | WRITE_ACTIVE\nconst WRITE_DRAIN_STATUS = WRITE_QUEUED | WRITE_UNDRAINED | OPEN_STATUS | WRITE_ACTIVE\nconst WRITE_STATUS = OPEN_STATUS | WRITE_ACTIVE | WRITE_QUEUED | WRITE_CORKED\nconst WRITE_PRIMARY_AND_ACTIVE = WRITE_PRIMARY | WRITE_ACTIVE\nconst WRITE_ACTIVE_AND_WRITING = WRITE_ACTIVE | WRITE_WRITING\nconst WRITE_FINISHING_STATUS = OPEN_STATUS | WRITE_FINISHING | WRITE_QUEUED_AND_ACTIVE | WRITE_DONE\nconst WRITE_BACKPRESSURE_STATUS = WRITE_UNDRAINED | DESTROY_STATUS | WRITE_FINISHING | WRITE_DONE\nconst WRITE_UPDATE_SYNC_STATUS = WRITE_UPDATING | OPEN_STATUS | WRITE_NEXT_TICK | WRITE_PRIMARY\nconst WRITE_DROP_DATA = WRITE_FINISHING | WRITE_DONE | DESTROY_STATUS\n\nconst asyncIterator = Symbol.asyncIterator || Symbol('asyncIterator')\n\nclass WritableState {\n  constructor (stream, { highWaterMark = 16384, map = null, mapWritable, byteLength, byteLengthWritable } = {}) {\n    this.stream = stream\n    this.queue = new FIFO()\n    this.highWaterMark = highWaterMark\n    this.buffered = 0\n    this.error = null\n    this.pipeline = null\n    this.drains = null // if we add more seldomly used helpers we might them into a subobject so its a single ptr\n    this.byteLength = byteLengthWritable || byteLength || defaultByteLength\n    this.map = mapWritable || map\n    this.afterWrite = afterWrite.bind(this)\n    this.afterUpdateNextTick = updateWriteNT.bind(this)\n  }\n\n  get ended () {\n    return (this.stream._duplexState & WRITE_DONE) !== 0\n  }\n\n  push (data) {\n    if ((this.stream._duplexState & WRITE_DROP_DATA) !== 0) return false\n    if (this.map !== null) data = this.map(data)\n\n    this.buffered += this.byteLength(data)\n    this.queue.push(data)\n\n    if (this.buffered < this.highWaterMark) {\n      this.stream._duplexState |= WRITE_QUEUED\n      return true\n    }\n\n    this.stream._duplexState |= WRITE_QUEUED_AND_UNDRAINED\n    return false\n  }\n\n  shift () {\n    const data = this.queue.shift()\n\n    this.buffered -= this.byteLength(data)\n    if (this.buffered === 0) this.stream._duplexState &= WRITE_NOT_QUEUED\n\n    return data\n  }\n\n  end (data) {\n    if (typeof data === 'function') this.stream.once('finish', data)\n    else if (data !== undefined && data !== null) this.push(data)\n    this.stream._duplexState = (this.stream._duplexState | WRITE_FINISHING) & WRITE_NON_PRIMARY\n  }\n\n  autoBatch (data, cb) {\n    const buffer = []\n    const stream = this.stream\n\n    buffer.push(data)\n    while ((stream._duplexState & WRITE_STATUS) === WRITE_QUEUED_AND_ACTIVE) {\n      buffer.push(stream._writableState.shift())\n    }\n\n    if ((stream._duplexState & OPEN_STATUS) !== 0) return cb(null)\n    stream._writev(buffer, cb)\n  }\n\n  update () {\n    const stream = this.stream\n\n    stream._duplexState |= WRITE_UPDATING\n\n    do {\n      while ((stream._duplexState & WRITE_STATUS) === WRITE_QUEUED) {\n        const data = this.shift()\n        stream._duplexState |= WRITE_ACTIVE_AND_WRITING\n        stream._write(data, this.afterWrite)\n      }\n\n      if ((stream._duplexState & WRITE_PRIMARY_AND_ACTIVE) === 0) this.updateNonPrimary()\n    } while (this.continueUpdate() === true)\n\n    stream._duplexState &= WRITE_NOT_UPDATING\n  }\n\n  updateNonPrimary () {\n    const stream = this.stream\n\n    if ((stream._duplexState & WRITE_FINISHING_STATUS) === WRITE_FINISHING) {\n      stream._duplexState = stream._duplexState | WRITE_ACTIVE\n      stream._final(afterFinal.bind(this))\n      return\n    }\n\n    if ((stream._duplexState & DESTROY_STATUS) === DESTROYING) {\n      if ((stream._duplexState & ACTIVE_OR_TICKING) === 0) {\n        stream._duplexState |= ACTIVE\n        stream._destroy(afterDestroy.bind(this))\n      }\n      return\n    }\n\n    if ((stream._duplexState & IS_OPENING) === OPENING) {\n      stream._duplexState = (stream._duplexState | ACTIVE) & NOT_OPENING\n      stream._open(afterOpen.bind(this))\n    }\n  }\n\n  continueUpdate () {\n    if ((this.stream._duplexState & WRITE_NEXT_TICK) === 0) return false\n    this.stream._duplexState &= WRITE_NOT_NEXT_TICK\n    return true\n  }\n\n  updateCallback () {\n    if ((this.stream._duplexState & WRITE_UPDATE_SYNC_STATUS) === WRITE_PRIMARY) this.update()\n    else this.updateNextTick()\n  }\n\n  updateNextTick () {\n    if ((this.stream._duplexState & WRITE_NEXT_TICK) !== 0) return\n    this.stream._duplexState |= WRITE_NEXT_TICK\n    if ((this.stream._duplexState & WRITE_UPDATING) === 0) qmt(this.afterUpdateNextTick)\n  }\n}\n\nclass ReadableState {\n  constructor (stream, { highWaterMark = 16384, map = null, mapReadable, byteLength, byteLengthReadable } = {}) {\n    this.stream = stream\n    this.queue = new FIFO()\n    this.highWaterMark = highWaterMark === 0 ? 1 : highWaterMark\n    this.buffered = 0\n    this.readAhead = highWaterMark > 0\n    this.error = null\n    this.pipeline = null\n    this.byteLength = byteLengthReadable || byteLength || defaultByteLength\n    this.map = mapReadable || map\n    this.pipeTo = null\n    this.afterRead = afterRead.bind(this)\n    this.afterUpdateNextTick = updateReadNT.bind(this)\n  }\n\n  get ended () {\n    return (this.stream._duplexState & READ_DONE) !== 0\n  }\n\n  pipe (pipeTo, cb) {\n    if (this.pipeTo !== null) throw new Error('Can only pipe to one destination')\n    if (typeof cb !== 'function') cb = null\n\n    this.stream._duplexState |= READ_PIPE_DRAINED\n    this.pipeTo = pipeTo\n    this.pipeline = new Pipeline(this.stream, pipeTo, cb)\n\n    if (cb) this.stream.on('error', noop) // We already error handle this so supress crashes\n\n    if (isStreamx(pipeTo)) {\n      pipeTo._writableState.pipeline = this.pipeline\n      if (cb) pipeTo.on('error', noop) // We already error handle this so supress crashes\n      pipeTo.on('finish', this.pipeline.finished.bind(this.pipeline)) // TODO: just call finished from pipeTo itself\n    } else {\n      const onerror = this.pipeline.done.bind(this.pipeline, pipeTo)\n      const onclose = this.pipeline.done.bind(this.pipeline, pipeTo, null) // onclose has a weird bool arg\n      pipeTo.on('error', onerror)\n      pipeTo.on('close', onclose)\n      pipeTo.on('finish', this.pipeline.finished.bind(this.pipeline))\n    }\n\n    pipeTo.on('drain', afterDrain.bind(this))\n    this.stream.emit('piping', pipeTo)\n    pipeTo.emit('pipe', this.stream)\n  }\n\n  push (data) {\n    const stream = this.stream\n\n    if (data === null) {\n      this.highWaterMark = 0\n      stream._duplexState = (stream._duplexState | READ_ENDING) & READ_NON_PRIMARY_AND_PUSHED\n      return false\n    }\n\n    if (this.map !== null) {\n      data = this.map(data)\n      if (data === null) {\n        stream._duplexState &= READ_PUSHED\n        return this.buffered < this.highWaterMark\n      }\n    }\n\n    this.buffered += this.byteLength(data)\n    this.queue.push(data)\n\n    stream._duplexState = (stream._duplexState | READ_QUEUED) & READ_PUSHED\n\n    return this.buffered < this.highWaterMark\n  }\n\n  shift () {\n    const data = this.queue.shift()\n\n    this.buffered -= this.byteLength(data)\n    if (this.buffered === 0) this.stream._duplexState &= READ_NOT_QUEUED\n    return data\n  }\n\n  unshift (data) {\n    const pending = [this.map !== null ? this.map(data) : data]\n    while (this.buffered > 0) pending.push(this.shift())\n\n    for (let i = 0; i < pending.length - 1; i++) {\n      const data = pending[i]\n      this.buffered += this.byteLength(data)\n      this.queue.push(data)\n    }\n\n    this.push(pending[pending.length - 1])\n  }\n\n  read () {\n    const stream = this.stream\n\n    if ((stream._duplexState & READ_STATUS) === READ_QUEUED) {\n      const data = this.shift()\n      if (this.pipeTo !== null && this.pipeTo.write(data) === false) stream._duplexState &= READ_PIPE_NOT_DRAINED\n      if ((stream._duplexState & READ_EMIT_DATA) !== 0) stream.emit('data', data)\n      return data\n    }\n\n    if (this.readAhead === false) {\n      stream._duplexState |= READ_READ_AHEAD\n      this.updateNextTick()\n    }\n\n    return null\n  }\n\n  drain () {\n    const stream = this.stream\n\n    while ((stream._duplexState & READ_STATUS) === READ_QUEUED && (stream._duplexState & READ_FLOWING) !== 0) {\n      const data = this.shift()\n      if (this.pipeTo !== null && this.pipeTo.write(data) === false) stream._duplexState &= READ_PIPE_NOT_DRAINED\n      if ((stream._duplexState & READ_EMIT_DATA) !== 0) stream.emit('data', data)\n    }\n  }\n\n  update () {\n    const stream = this.stream\n\n    stream._duplexState |= READ_UPDATING\n\n    do {\n      this.drain()\n\n      while (this.buffered < this.highWaterMark && (stream._duplexState & SHOULD_NOT_READ) === READ_READ_AHEAD) {\n        stream._duplexState |= READ_ACTIVE_AND_NEEDS_PUSH\n        stream._read(this.afterRead)\n        this.drain()\n      }\n\n      if ((stream._duplexState & READ_READABLE_STATUS) === READ_EMIT_READABLE_AND_QUEUED) {\n        stream._duplexState |= READ_EMITTED_READABLE\n        stream.emit('readable')\n      }\n\n      if ((stream._duplexState & READ_PRIMARY_AND_ACTIVE) === 0) this.updateNonPrimary()\n    } while (this.continueUpdate() === true)\n\n    stream._duplexState &= READ_NOT_UPDATING\n  }\n\n  updateNonPrimary () {\n    const stream = this.stream\n\n    if ((stream._duplexState & READ_ENDING_STATUS) === READ_ENDING) {\n      stream._duplexState = (stream._duplexState | READ_DONE) & READ_NOT_ENDING\n      stream.emit('end')\n      if ((stream._duplexState & AUTO_DESTROY) === DONE) stream._duplexState |= DESTROYING\n      if (this.pipeTo !== null) this.pipeTo.end()\n    }\n\n    if ((stream._duplexState & DESTROY_STATUS) === DESTROYING) {\n      if ((stream._duplexState & ACTIVE_OR_TICKING) === 0) {\n        stream._duplexState |= ACTIVE\n        stream._destroy(afterDestroy.bind(this))\n      }\n      return\n    }\n\n    if ((stream._duplexState & IS_OPENING) === OPENING) {\n      stream._duplexState = (stream._duplexState | ACTIVE) & NOT_OPENING\n      stream._open(afterOpen.bind(this))\n    }\n  }\n\n  continueUpdate () {\n    if ((this.stream._duplexState & READ_NEXT_TICK) === 0) return false\n    this.stream._duplexState &= READ_NOT_NEXT_TICK\n    return true\n  }\n\n  updateCallback () {\n    if ((this.stream._duplexState & READ_UPDATE_SYNC_STATUS) === READ_PRIMARY) this.update()\n    else this.updateNextTick()\n  }\n\n  updateNextTickIfOpen () {\n    if ((this.stream._duplexState & READ_NEXT_TICK_OR_OPENING) !== 0) return\n    this.stream._duplexState |= READ_NEXT_TICK\n    if ((this.stream._duplexState & READ_UPDATING) === 0) qmt(this.afterUpdateNextTick)\n  }\n\n  updateNextTick () {\n    if ((this.stream._duplexState & READ_NEXT_TICK) !== 0) return\n    this.stream._duplexState |= READ_NEXT_TICK\n    if ((this.stream._duplexState & READ_UPDATING) === 0) qmt(this.afterUpdateNextTick)\n  }\n}\n\nclass TransformState {\n  constructor (stream) {\n    this.data = null\n    this.afterTransform = afterTransform.bind(stream)\n    this.afterFinal = null\n  }\n}\n\nclass Pipeline {\n  constructor (src, dst, cb) {\n    this.from = src\n    this.to = dst\n    this.afterPipe = cb\n    this.error = null\n    this.pipeToFinished = false\n  }\n\n  finished () {\n    this.pipeToFinished = true\n  }\n\n  done (stream, err) {\n    if (err) this.error = err\n\n    if (stream === this.to) {\n      this.to = null\n\n      if (this.from !== null) {\n        if ((this.from._duplexState & READ_DONE) === 0 || !this.pipeToFinished) {\n          this.from.destroy(this.error || new Error('Writable stream closed prematurely'))\n        }\n        return\n      }\n    }\n\n    if (stream === this.from) {\n      this.from = null\n\n      if (this.to !== null) {\n        if ((stream._duplexState & READ_DONE) === 0) {\n          this.to.destroy(this.error || new Error('Readable stream closed before ending'))\n        }\n        return\n      }\n    }\n\n    if (this.afterPipe !== null) this.afterPipe(this.error)\n    this.to = this.from = this.afterPipe = null\n  }\n}\n\nfunction afterDrain () {\n  this.stream._duplexState |= READ_PIPE_DRAINED\n  this.updateCallback()\n}\n\nfunction afterFinal (err) {\n  const stream = this.stream\n  if (err) stream.destroy(err)\n  if ((stream._duplexState & DESTROY_STATUS) === 0) {\n    stream._duplexState |= WRITE_DONE\n    stream.emit('finish')\n  }\n  if ((stream._duplexState & AUTO_DESTROY) === DONE) {\n    stream._duplexState |= DESTROYING\n  }\n\n  stream._duplexState &= WRITE_NOT_FINISHING\n\n  // no need to wait the extra tick here, so we short circuit that\n  if ((stream._duplexState & WRITE_UPDATING) === 0) this.update()\n  else this.updateNextTick()\n}\n\nfunction afterDestroy (err) {\n  const stream = this.stream\n\n  if (!err && this.error !== STREAM_DESTROYED) err = this.error\n  if (err) stream.emit('error', err)\n  stream._duplexState |= DESTROYED\n  stream.emit('close')\n\n  const rs = stream._readableState\n  const ws = stream._writableState\n\n  if (rs !== null && rs.pipeline !== null) rs.pipeline.done(stream, err)\n\n  if (ws !== null) {\n    while (ws.drains !== null && ws.drains.length > 0) ws.drains.shift().resolve(false)\n    if (ws.pipeline !== null) ws.pipeline.done(stream, err)\n  }\n}\n\nfunction afterWrite (err) {\n  const stream = this.stream\n\n  if (err) stream.destroy(err)\n  stream._duplexState &= WRITE_NOT_ACTIVE\n\n  if (this.drains !== null) tickDrains(this.drains)\n\n  if ((stream._duplexState & WRITE_DRAIN_STATUS) === WRITE_UNDRAINED) {\n    stream._duplexState &= WRITE_DRAINED\n    if ((stream._duplexState & WRITE_EMIT_DRAIN) === WRITE_EMIT_DRAIN) {\n      stream.emit('drain')\n    }\n  }\n\n  this.updateCallback()\n}\n\nfunction afterRead (err) {\n  if (err) this.stream.destroy(err)\n  this.stream._duplexState &= READ_NOT_ACTIVE\n  if (this.readAhead === false && (this.stream._duplexState & READ_RESUMED) === 0) this.stream._duplexState &= READ_NO_READ_AHEAD\n  this.updateCallback()\n}\n\nfunction updateReadNT () {\n  if ((this.stream._duplexState & READ_UPDATING) === 0) {\n    this.stream._duplexState &= READ_NOT_NEXT_TICK\n    this.update()\n  }\n}\n\nfunction updateWriteNT () {\n  if ((this.stream._duplexState & WRITE_UPDATING) === 0) {\n    this.stream._duplexState &= WRITE_NOT_NEXT_TICK\n    this.update()\n  }\n}\n\nfunction tickDrains (drains) {\n  for (let i = 0; i < drains.length; i++) {\n    // drains.writes are monotonic, so if one is 0 its always the first one\n    if (--drains[i].writes === 0) {\n      drains.shift().resolve(true)\n      i--\n    }\n  }\n}\n\nfunction afterOpen (err) {\n  const stream = this.stream\n\n  if (err) stream.destroy(err)\n\n  if ((stream._duplexState & DESTROYING) === 0) {\n    if ((stream._duplexState & READ_PRIMARY_STATUS) === 0) stream._duplexState |= READ_PRIMARY\n    if ((stream._duplexState & WRITE_PRIMARY_STATUS) === 0) stream._duplexState |= WRITE_PRIMARY\n    stream.emit('open')\n  }\n\n  stream._duplexState &= NOT_ACTIVE\n\n  if (stream._writableState !== null) {\n    stream._writableState.updateCallback()\n  }\n\n  if (stream._readableState !== null) {\n    stream._readableState.updateCallback()\n  }\n}\n\nfunction afterTransform (err, data) {\n  if (data !== undefined && data !== null) this.push(data)\n  this._writableState.afterWrite(err)\n}\n\nfunction newListener (name) {\n  if (this._readableState !== null) {\n    if (name === 'data') {\n      this._duplexState |= (READ_EMIT_DATA | READ_RESUMED_READ_AHEAD)\n      this._readableState.updateNextTick()\n    }\n    if (name === 'readable') {\n      this._duplexState |= READ_EMIT_READABLE\n      this._readableState.updateNextTick()\n    }\n  }\n\n  if (this._writableState !== null) {\n    if (name === 'drain') {\n      this._duplexState |= WRITE_EMIT_DRAIN\n      this._writableState.updateNextTick()\n    }\n  }\n}\n\nclass Stream extends EventEmitter {\n  constructor (opts) {\n    super()\n\n    this._duplexState = 0\n    this._readableState = null\n    this._writableState = null\n\n    if (opts) {\n      if (opts.open) this._open = opts.open\n      if (opts.destroy) this._destroy = opts.destroy\n      if (opts.predestroy) this._predestroy = opts.predestroy\n      if (opts.signal) {\n        opts.signal.addEventListener('abort', abort.bind(this))\n      }\n    }\n\n    this.on('newListener', newListener)\n  }\n\n  _open (cb) {\n    cb(null)\n  }\n\n  _destroy (cb) {\n    cb(null)\n  }\n\n  _predestroy () {\n    // does nothing\n  }\n\n  get readable () {\n    return this._readableState !== null ? true : undefined\n  }\n\n  get writable () {\n    return this._writableState !== null ? true : undefined\n  }\n\n  get destroyed () {\n    return (this._duplexState & DESTROYED) !== 0\n  }\n\n  get destroying () {\n    return (this._duplexState & DESTROY_STATUS) !== 0\n  }\n\n  destroy (err) {\n    if ((this._duplexState & DESTROY_STATUS) === 0) {\n      if (!err) err = STREAM_DESTROYED\n      this._duplexState = (this._duplexState | DESTROYING) & NON_PRIMARY\n\n      if (this._readableState !== null) {\n        this._readableState.highWaterMark = 0\n        this._readableState.error = err\n      }\n      if (this._writableState !== null) {\n        this._writableState.highWaterMark = 0\n        this._writableState.error = err\n      }\n\n      this._duplexState |= PREDESTROYING\n      this._predestroy()\n      this._duplexState &= NOT_PREDESTROYING\n\n      if (this._readableState !== null) this._readableState.updateNextTick()\n      if (this._writableState !== null) this._writableState.updateNextTick()\n    }\n  }\n}\n\nclass Readable extends Stream {\n  constructor (opts) {\n    super(opts)\n\n    this._duplexState |= OPENING | WRITE_DONE | READ_READ_AHEAD\n    this._readableState = new ReadableState(this, opts)\n\n    if (opts) {\n      if (this._readableState.readAhead === false) this._duplexState &= READ_NO_READ_AHEAD\n      if (opts.read) this._read = opts.read\n      if (opts.eagerOpen) this._readableState.updateNextTick()\n      if (opts.encoding) this.setEncoding(opts.encoding)\n    }\n  }\n\n  setEncoding (encoding) {\n    const dec = new TextDecoder(encoding)\n    const map = this._readableState.map || echo\n    this._readableState.map = mapOrSkip\n    return this\n\n    function mapOrSkip (data) {\n      const next = dec.push(data)\n      return next === '' && (data.byteLength !== 0 || dec.remaining > 0) ? null : map(next)\n    }\n  }\n\n  _read (cb) {\n    cb(null)\n  }\n\n  pipe (dest, cb) {\n    this._readableState.updateNextTick()\n    this._readableState.pipe(dest, cb)\n    return dest\n  }\n\n  read () {\n    this._readableState.updateNextTick()\n    return this._readableState.read()\n  }\n\n  push (data) {\n    this._readableState.updateNextTickIfOpen()\n    return this._readableState.push(data)\n  }\n\n  unshift (data) {\n    this._readableState.updateNextTickIfOpen()\n    return this._readableState.unshift(data)\n  }\n\n  resume () {\n    this._duplexState |= READ_RESUMED_READ_AHEAD\n    this._readableState.updateNextTick()\n    return this\n  }\n\n  pause () {\n    this._duplexState &= (this._readableState.readAhead === false ? READ_PAUSED_NO_READ_AHEAD : READ_PAUSED)\n    return this\n  }\n\n  static _fromAsyncIterator (ite, opts) {\n    let destroy\n\n    const rs = new Readable({\n      ...opts,\n      read (cb) {\n        ite.next().then(push).then(cb.bind(null, null)).catch(cb)\n      },\n      predestroy () {\n        destroy = ite.return()\n      },\n      destroy (cb) {\n        if (!destroy) return cb(null)\n        destroy.then(cb.bind(null, null)).catch(cb)\n      }\n    })\n\n    return rs\n\n    function push (data) {\n      if (data.done) rs.push(null)\n      else rs.push(data.value)\n    }\n  }\n\n  static from (data, opts) {\n    if (isReadStreamx(data)) return data\n    if (data[asyncIterator]) return this._fromAsyncIterator(data[asyncIterator](), opts)\n    if (!Array.isArray(data)) data = data === undefined ? [] : [data]\n\n    let i = 0\n    return new Readable({\n      ...opts,\n      read (cb) {\n        this.push(i === data.length ? null : data[i++])\n        cb(null)\n      }\n    })\n  }\n\n  static isBackpressured (rs) {\n    return (rs._duplexState & READ_BACKPRESSURE_STATUS) !== 0 || rs._readableState.buffered >= rs._readableState.highWaterMark\n  }\n\n  static isPaused (rs) {\n    return (rs._duplexState & READ_RESUMED) === 0\n  }\n\n  [asyncIterator] () {\n    const stream = this\n\n    let error = null\n    let promiseResolve = null\n    let promiseReject = null\n\n    this.on('error', (err) => { error = err })\n    this.on('readable', onreadable)\n    this.on('close', onclose)\n\n    return {\n      [asyncIterator] () {\n        return this\n      },\n      next () {\n        return new Promise(function (resolve, reject) {\n          promiseResolve = resolve\n          promiseReject = reject\n          const data = stream.read()\n          if (data !== null) ondata(data)\n          else if ((stream._duplexState & DESTROYED) !== 0) ondata(null)\n        })\n      },\n      return () {\n        return destroy(null)\n      },\n      throw (err) {\n        return destroy(err)\n      }\n    }\n\n    function onreadable () {\n      if (promiseResolve !== null) ondata(stream.read())\n    }\n\n    function onclose () {\n      if (promiseResolve !== null) ondata(null)\n    }\n\n    function ondata (data) {\n      if (promiseReject === null) return\n      if (error) promiseReject(error)\n      else if (data === null && (stream._duplexState & READ_DONE) === 0) promiseReject(STREAM_DESTROYED)\n      else promiseResolve({ value: data, done: data === null })\n      promiseReject = promiseResolve = null\n    }\n\n    function destroy (err) {\n      stream.destroy(err)\n      return new Promise((resolve, reject) => {\n        if (stream._duplexState & DESTROYED) return resolve({ value: undefined, done: true })\n        stream.once('close', function () {\n          if (err) reject(err)\n          else resolve({ value: undefined, done: true })\n        })\n      })\n    }\n  }\n}\n\nclass Writable extends Stream {\n  constructor (opts) {\n    super(opts)\n\n    this._duplexState |= OPENING | READ_DONE\n    this._writableState = new WritableState(this, opts)\n\n    if (opts) {\n      if (opts.writev) this._writev = opts.writev\n      if (opts.write) this._write = opts.write\n      if (opts.final) this._final = opts.final\n      if (opts.eagerOpen) this._writableState.updateNextTick()\n    }\n  }\n\n  cork () {\n    this._duplexState |= WRITE_CORKED\n  }\n\n  uncork () {\n    this._duplexState &= WRITE_NOT_CORKED\n    this._writableState.updateNextTick()\n  }\n\n  _writev (batch, cb) {\n    cb(null)\n  }\n\n  _write (data, cb) {\n    this._writableState.autoBatch(data, cb)\n  }\n\n  _final (cb) {\n    cb(null)\n  }\n\n  static isBackpressured (ws) {\n    return (ws._duplexState & WRITE_BACKPRESSURE_STATUS) !== 0\n  }\n\n  static drained (ws) {\n    if (ws.destroyed) return Promise.resolve(false)\n    const state = ws._writableState\n    const pending = (isWritev(ws) ? Math.min(1, state.queue.length) : state.queue.length)\n    const writes = pending + ((ws._duplexState & WRITE_WRITING) ? 1 : 0)\n    if (writes === 0) return Promise.resolve(true)\n    if (state.drains === null) state.drains = []\n    return new Promise((resolve) => {\n      state.drains.push({ writes, resolve })\n    })\n  }\n\n  write (data) {\n    this._writableState.updateNextTick()\n    return this._writableState.push(data)\n  }\n\n  end (data) {\n    this._writableState.updateNextTick()\n    this._writableState.end(data)\n    return this\n  }\n}\n\nclass Duplex extends Readable { // and Writable\n  constructor (opts) {\n    super(opts)\n\n    this._duplexState = OPENING | (this._duplexState & READ_READ_AHEAD)\n    this._writableState = new WritableState(this, opts)\n\n    if (opts) {\n      if (opts.writev) this._writev = opts.writev\n      if (opts.write) this._write = opts.write\n      if (opts.final) this._final = opts.final\n    }\n  }\n\n  cork () {\n    this._duplexState |= WRITE_CORKED\n  }\n\n  uncork () {\n    this._duplexState &= WRITE_NOT_CORKED\n    this._writableState.updateNextTick()\n  }\n\n  _writev (batch, cb) {\n    cb(null)\n  }\n\n  _write (data, cb) {\n    this._writableState.autoBatch(data, cb)\n  }\n\n  _final (cb) {\n    cb(null)\n  }\n\n  write (data) {\n    this._writableState.updateNextTick()\n    return this._writableState.push(data)\n  }\n\n  end (data) {\n    this._writableState.updateNextTick()\n    this._writableState.end(data)\n    return this\n  }\n}\n\nclass Transform extends Duplex {\n  constructor (opts) {\n    super(opts)\n    this._transformState = new TransformState(this)\n\n    if (opts) {\n      if (opts.transform) this._transform = opts.transform\n      if (opts.flush) this._flush = opts.flush\n    }\n  }\n\n  _write (data, cb) {\n    if (this._readableState.buffered >= this._readableState.highWaterMark) {\n      this._transformState.data = data\n    } else {\n      this._transform(data, this._transformState.afterTransform)\n    }\n  }\n\n  _read (cb) {\n    if (this._transformState.data !== null) {\n      const data = this._transformState.data\n      this._transformState.data = null\n      cb(null)\n      this._transform(data, this._transformState.afterTransform)\n    } else {\n      cb(null)\n    }\n  }\n\n  destroy (err) {\n    super.destroy(err)\n    if (this._transformState.data !== null) {\n      this._transformState.data = null\n      this._transformState.afterTransform()\n    }\n  }\n\n  _transform (data, cb) {\n    cb(null, data)\n  }\n\n  _flush (cb) {\n    cb(null)\n  }\n\n  _final (cb) {\n    this._transformState.afterFinal = cb\n    this._flush(transformAfterFlush.bind(this))\n  }\n}\n\nclass PassThrough extends Transform {}\n\nfunction transformAfterFlush (err, data) {\n  const cb = this._transformState.afterFinal\n  if (err) return cb(err)\n  if (data !== null && data !== undefined) this.push(data)\n  this.push(null)\n  cb(null)\n}\n\nfunction pipelinePromise (...streams) {\n  return new Promise((resolve, reject) => {\n    return pipeline(...streams, (err) => {\n      if (err) return reject(err)\n      resolve()\n    })\n  })\n}\n\nfunction pipeline (stream, ...streams) {\n  const all = Array.isArray(stream) ? [...stream, ...streams] : [stream, ...streams]\n  const done = (all.length && typeof all[all.length - 1] === 'function') ? all.pop() : null\n\n  if (all.length < 2) throw new Error('Pipeline requires at least 2 streams')\n\n  let src = all[0]\n  let dest = null\n  let error = null\n\n  for (let i = 1; i < all.length; i++) {\n    dest = all[i]\n\n    if (isStreamx(src)) {\n      src.pipe(dest, onerror)\n    } else {\n      errorHandle(src, true, i > 1, onerror)\n      src.pipe(dest)\n    }\n\n    src = dest\n  }\n\n  if (done) {\n    let fin = false\n\n    const autoDestroy = isStreamx(dest) || !!(dest._writableState && dest._writableState.autoDestroy)\n\n    dest.on('error', (err) => {\n      if (error === null) error = err\n    })\n\n    dest.on('finish', () => {\n      fin = true\n      if (!autoDestroy) done(error)\n    })\n\n    if (autoDestroy) {\n      dest.on('close', () => done(error || (fin ? null : PREMATURE_CLOSE)))\n    }\n  }\n\n  return dest\n\n  function errorHandle (s, rd, wr, onerror) {\n    s.on('error', onerror)\n    s.on('close', onclose)\n\n    function onclose () {\n      if (rd && s._readableState && !s._readableState.ended) return onerror(PREMATURE_CLOSE)\n      if (wr && s._writableState && !s._writableState.ended) return onerror(PREMATURE_CLOSE)\n    }\n  }\n\n  function onerror (err) {\n    if (!err || error) return\n    error = err\n\n    for (const s of all) {\n      s.destroy(err)\n    }\n  }\n}\n\nfunction echo (s) {\n  return s\n}\n\nfunction isStream (stream) {\n  return !!stream._readableState || !!stream._writableState\n}\n\nfunction isStreamx (stream) {\n  return typeof stream._duplexState === 'number' && isStream(stream)\n}\n\nfunction isEnded (stream) {\n  return !!stream._readableState && stream._readableState.ended\n}\n\nfunction isFinished (stream) {\n  return !!stream._writableState && stream._writableState.ended\n}\n\nfunction getStreamError (stream, opts = {}) {\n  const err = (stream._readableState && stream._readableState.error) || (stream._writableState && stream._writableState.error)\n\n  // avoid implicit errors by default\n  return (!opts.all && err === STREAM_DESTROYED) ? null : err\n}\n\nfunction isReadStreamx (stream) {\n  return isStreamx(stream) && stream.readable\n}\n\nfunction isDisturbed (stream) {\n  return (stream._duplexState & OPENING) !== OPENING || (stream._duplexState & ACTIVE_OR_TICKING) !== 0\n}\n\nfunction isTypedArray (data) {\n  return typeof data === 'object' && data !== null && typeof data.byteLength === 'number'\n}\n\nfunction defaultByteLength (data) {\n  return isTypedArray(data) ? data.byteLength : 1024\n}\n\nfunction noop () {}\n\nfunction abort () {\n  this.destroy(new Error('Stream aborted.'))\n}\n\nfunction isWritev (s) {\n  return s._writev !== Writable.prototype._writev && s._writev !== Duplex.prototype._writev\n}\n\nmodule.exports = {\n  pipeline,\n  pipelinePromise,\n  isStream,\n  isStreamx,\n  isEnded,\n  isFinished,\n  isDisturbed,\n  getStreamError,\n  Stream,\n  Writable,\n  Readable,\n  Duplex,\n  Transform,\n  // Export PassThrough for compatibility with Node.js core's stream module\n  PassThrough\n}\n{\n  \"name\": \"streamx\",\n  \"version\": \"2.22.1\",\n  \"description\": \"An iteration of the Node.js core streams with a series of improvements\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"fast-fifo\": \"^1.3.2\",\n    \"text-decoder\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"b4a\": \"^1.6.6\",\n    \"brittle\": \"^3.1.1\",\n    \"end-of-stream\": \"^1.4.4\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"optionalDependencies\": {\n    \"bare-events\": \"^2.2.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/streamx.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/streamx/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/streamx\"\n}\nconst PassThroughDecoder = require('./lib/pass-through-decoder')\nconst UTF8Decoder = require('./lib/utf8-decoder')\n\nmodule.exports = class TextDecoder {\n  constructor (encoding = 'utf8') {\n    this.encoding = normalizeEncoding(encoding)\n\n    switch (this.encoding) {\n      case 'utf8':\n        this.decoder = new UTF8Decoder()\n        break\n      case 'utf16le':\n      case 'base64':\n        throw new Error('Unsupported encoding: ' + this.encoding)\n      default:\n        this.decoder = new PassThroughDecoder(this.encoding)\n    }\n  }\n\n  get remaining () {\n    return this.decoder.remaining\n  }\n\n  push (data) {\n    if (typeof data === 'string') return data\n    return this.decoder.decode(data)\n  }\n\n  // For Node.js compatibility\n  write (data) {\n    return this.push(data)\n  }\n\n  end (data) {\n    let result = ''\n    if (data) result = this.push(data)\n    result += this.decoder.flush()\n    return result\n  }\n}\n\nfunction normalizeEncoding (encoding) {\n  encoding = encoding.toLowerCase()\n\n  switch (encoding) {\n    case 'utf8':\n    case 'utf-8':\n      return 'utf8'\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return 'utf16le'\n    case 'latin1':\n    case 'binary':\n      return 'latin1'\n    case 'base64':\n    case 'ascii':\n    case 'hex':\n      return encoding\n    default:\n      throw new Error('Unknown encoding: ' + encoding)\n  }\n};\nconst b4a = require('b4a')\n\nmodule.exports = class PassThroughDecoder {\n  constructor (encoding) {\n    this.encoding = encoding\n  }\n\n  get remaining () {\n    return 0\n  }\n\n  decode (tail) {\n    return b4a.toString(tail, this.encoding)\n  }\n\n  flush () {\n    return ''\n  }\n}\nconst b4a = require('b4a')\n\n/**\n * https://encoding.spec.whatwg.org/#utf-8-decoder\n */\nmodule.exports = class UTF8Decoder {\n  constructor () {\n    this.codePoint = 0\n    this.bytesSeen = 0\n    this.bytesNeeded = 0\n    this.lowerBoundary = 0x80\n    this.upperBoundary = 0xbf\n  }\n\n  get remaining () {\n    return this.bytesSeen\n  }\n\n  decode (data) {\n    // If we have a fast path, just sniff if the last part is a boundary\n    if (this.bytesNeeded === 0) {\n      let isBoundary = true\n\n      for (let i = Math.max(0, data.byteLength - 4), n = data.byteLength; i < n && isBoundary; i++) {\n        isBoundary = data[i] <= 0x7f\n      }\n\n      if (isBoundary) return b4a.toString(data, 'utf8')\n    }\n\n    let result = ''\n\n    for (let i = 0, n = data.byteLength; i < n; i++) {\n      const byte = data[i]\n\n      if (this.bytesNeeded === 0) {\n        if (byte <= 0x7f) {\n          result += String.fromCharCode(byte)\n        } else {\n          this.bytesSeen = 1\n\n          if (byte >= 0xc2 && byte <= 0xdf) {\n            this.bytesNeeded = 2\n            this.codePoint = byte & 0x1f\n          } else if (byte >= 0xe0 && byte <= 0xef) {\n            if (byte === 0xe0) this.lowerBoundary = 0xa0\n            else if (byte === 0xed) this.upperBoundary = 0x9f\n            this.bytesNeeded = 3\n            this.codePoint = byte & 0xf\n          } else if (byte >= 0xf0 && byte <= 0xf4) {\n            if (byte === 0xf0) this.lowerBoundary = 0x90\n            if (byte === 0xf4) this.upperBoundary = 0x8f\n            this.bytesNeeded = 4\n            this.codePoint = byte & 0x7\n          } else {\n            result += '\\ufffd'\n          }\n        }\n\n        continue\n      }\n\n      if (byte < this.lowerBoundary || byte > this.upperBoundary) {\n        this.codePoint = 0\n        this.bytesNeeded = 0\n        this.bytesSeen = 0\n        this.lowerBoundary = 0x80\n        this.upperBoundary = 0xbf\n\n        result += '\\ufffd'\n\n        continue\n      }\n\n      this.lowerBoundary = 0x80\n      this.upperBoundary = 0xbf\n\n      this.codePoint = (this.codePoint << 6) | (byte & 0x3f)\n      this.bytesSeen++\n\n      if (this.bytesSeen !== this.bytesNeeded) continue\n\n      result += String.fromCodePoint(this.codePoint)\n\n      this.codePoint = 0\n      this.bytesNeeded = 0\n      this.bytesSeen = 0\n    }\n\n    return result\n  }\n\n  flush () {\n    const result = this.bytesNeeded > 0 ? '\\ufffd' : ''\n\n    this.codePoint = 0\n    this.bytesNeeded = 0\n    this.bytesSeen = 0\n    this.lowerBoundary = 0x80\n    this.upperBoundary = 0xbf\n\n    return result\n  }\n}\n{\n  \"name\": \"text-decoder\",\n  \"version\": \"1.2.3\",\n  \"description\": \"Streaming text decoder that preserves multibyte Unicode characters\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib\"\n  ],\n  \"browser\": {\n    \"./lib/pass-through-decoder.js\": \"./lib/browser-decoder.js\",\n    \"./lib/utf8-decoder.js\": \"./lib/browser-decoder.js\"\n  },\n  \"react-native\": {\n    \"./lib/pass-through-decoder.js\": \"./lib/pass-through-decoder.js\",\n    \"./lib/utf8-decoder.js\": \"./lib/utf8-decoder.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/text-decoder.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/text-decoder/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/text-decoder#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.4\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.0.0\"\n  }\n}\n{\n  \"private\": true,\n  \"name\": \"bare-runtime-state-management-example\",\n  \"description\": \"Example of embedding Bare in an Expo application\",\n  \"main\": \"expo-router/entry\",\n  \"scripts\": {\n    \"start\": \"expo run\",\n    \"android\": \"expo run:android\",\n    \"build-backend\": \"npx bare-pack --target ios --target android --linked --out app/app.bundle.mjs backend/backend.mjs\",\n    \"ios\": \"expo run:ios\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/hopets/bare-runtime-native-state-tutorial.git\"\n  },\n  \"author\": \"holepunchto\",\n  \"license\": \"Apache-2.0\",\n  \"dependencies\": {\n    \"@hopets/peardrive-core\": \"^0.2.52\",\n    \"@react-native-clipboard/clipboard\": \"^1.16.3\",\n    \"@react-navigation/native\": \"^7.1.14\",\n    \"@react-navigation/native-stack\": \"^7.3.21\",\n    \"b4a\": \"^1.6.7\",\n    \"bare-fs\": \"^4.1.6\",\n    \"bare-rpc\": \"^0.2.6\",\n    \"corestore\": \"^7.4.5\",\n    \"events\": \"^3.3.0\",\n    \"expo\": \"^53.0.9\",\n    \"expo-build-properties\": \"^0.14.6\",\n    \"expo-constants\": \"~17.1.7\",\n    \"expo-linking\": \"^7.1.5\",\n    \"expo-router\": \"~5.1.3\",\n    \"expo-system-ui\": \"^5.0.7\",\n    \"pear\": \"^1.1.8\",\n    \"react\": \"~19.0.0\",\n    \"react-dom\": \"~19.0.0\",\n    \"react-native\": \"^0.79.2\",\n    \"react-native-bare-kit\": \"^0.8.1\",\n    \"react-native-safe-area-context\": \"5.4.0\",\n    \"react-native-screens\": \"~4.11.1\",\n    \"react-native-web\": \"^0.20.0\"\n  },\n  \"devDependencies\": {\n    \"@types/b4a\": \"^1.6.5\",\n    \"@types/react\": \"^19.1.3\",\n    \"bare-pack\": \"^1.4.0\",\n    \"prettier\": \"^3.3.3\",\n    \"prettier-config-standard\": \"^7.0.0\",\n    \"typescript\": \"^5.3.3\"\n  },\n  \"version\": \"1.0.0\"\n}\n// TODO: Frontend -> Backend commands\nexport const RPC_INCREMENT = 0;\nexport const RPC_DECREMENT = 1;\nexport const RPC_GET_COUNT = 2;\n\n// TODO: Backend -> Frontend commands\nexport const RPC_UPDATE = 3;\n"
